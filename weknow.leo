<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_stylesheet?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20120710140424.5446" a="E"><vh>4SAE</vh>
<v t="zoomq.20120710140424.5447"><vh>@nosent README.md</vh></v>
<v t="zoomq.20120710140424.5454"><vh>@nosent config.yaml</vh></v>
<v t="zoomq.20120710140424.5455"><vh>@nosent index.wsgi</vh></v>
<v t="zoomq.20120723102156.5544" a="E"><vh>@nosent config.py</vh>
<v t="zoomq.20120727213305.14750"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120710140424.5456" a="E"><vh>&lt;&lt;cfg4Borg&gt;&gt;</vh>
<v t="zoomq.20130923093950.3647"><vh>KVDB</vh>
<v t="zoomq.20130923093950.5397"><vh>&lt;&lt;MEMBER&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5395"><vh>&lt;&lt;CONTENT&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8569"><vh>&lt;&lt;大妈们&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5396"><vh>&lt;&lt;HISTORIC&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130918155053.7084" a="E"><vh>4wechat</vh>
<v t="zoomq.20130923093950.8818"><vh>&lt;&lt;ALIAS&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.7285"><vh>&lt;&lt;XML模板&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20130918155053.5758"><vh>@nosent xsettings.py</vh></v>
<v t="zoomq.20120727213305.3937"><vh>功能/数据mapping</vh>
<v t="zoomq.20120727213305.14708"><vh>TODO</vh></v>
<v t="zoomq.20120720204727.3913"><vh>URL mapping</vh></v>
<v t="zoomq.20120720204727.3914"><vh>KV mapping</vh></v>
</v>
<v t="zoomq.20120723102156.5541" a="E"><vh>module</vh>
<v t="zoomq.20120723102156.5544" a="E"></v>
<v t="zoomq.20120727213305.14687"><vh>crx_id.py</vh>
<v t="zoomq.20120727213305.14688"><vh>crx_id declarations</vh></v>
<v t="zoomq.20120727213305.14689"><vh>usage</vh></v>
<v t="zoomq.20120727213305.14690"><vh>HexToInt</vh></v>
<v t="zoomq.20120727213305.14691"><vh>HexToMPDecimal</vh></v>
<v t="zoomq.20120727213305.14692"><vh>HexTo256</vh></v>
<v t="zoomq.20120727213305.14693"><vh>GetPublicKey</vh></v>
<v t="zoomq.20120727213305.14694"><vh>GetCRXHash</vh></v>
<v t="zoomq.20120727213305.14695"><vh>GetCRXAppID</vh></v>
<v t="zoomq.20120727213305.14696"><vh>GetCRXAppID4upload</vh></v>
<v t="zoomq.20120727213305.14697"><vh>main</vh></v>
</v>
<v t="zoomq.20120811092308.5970"><vh>@nosent data_uri.py</vh></v>
<v t="zoomq.20120820121523.7422"><vh>@nosent auth.py</vh>
<v t="zoomq.20120820121523.7423"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120820121523.7426"><vh>sha256_uhex</vh></v>
<v t="zoomq.20120820121523.7424"><vh>check_login</vh></v>
<v t="zoomq.20120820121523.7425"><vh>auth_required</vh></v>
</v>
<v t="zoomq.20120717112543.5481"><vh>@nosent utility.py</vh>
<v t="zoomq.20120727213305.14698"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14751"><vh>KV4CRX()</vh></v>
<v t="zoomq.20120805183037.4193"><vh>KV4GRP()</vh>
<v t="zoomq.20120805183037.5897"><vh>&lt;&lt;set crc grp 相关值列表&gt;&gt;</vh></v>
</v>
<v t="zoomq.20120804110957.4478"><vh>ST4CRX()</vh></v>
<v t="zoomq.20120802192540.8726"><vh>PUTHIS()</vh></v>
<v t="zoomq.20120804110957.4146"><vh>PUT2SS()</vh></v>
<v t="zoomq.20120804110957.4489"><vh>PUT_PIC4CRX()</vh></v>
<v t="zoomq.20120727213305.14756"><vh>INIobjSYS()</vh></v>
<v t="zoomq.20120802192540.5463"><vh>IDX4LIST()</vh></v>
<v t="zoomq.20120804110957.4144"><vh>POP4KV()</vh></v>
<v t="zoomq.20120802192540.8728"><vh>INS2KV()</vh></v>
<v t="zoomq.20120804110957.4485"><vh>POP4LIST()</vh></v>
<v t="zoomq.20120805183037.4187"><vh>INS2LIST()</vh></v>
<v t="zoomq.20120805183037.5896"><vh>INS2DICT4LIST()</vh></v>
<v t="zoomq.20120802192540.7100"><vh>TSTAMP()</vh></v>
<v t="zoomq.20120802192540.5468"><vh>GENID()</vh></v>
<v t="zoomq.20120727213305.14699"><vh>INCR4KV()</vh></v>
<v t="zoomq.20120727213305.14701"><vh>INCR4MM()</vh></v>
</v>
<v t="zoomq.20120820121523.7432"><vh>@nosent lb4crx2cli.py</vh>
<v t="zoomq.20120820121523.7433" a="E"><vh>&lt;&lt;declarations&gt;&gt;</vh>
<v t="zoomq.20120820121523.7438"><vh>cfg. Borg</vh></v>
</v>
<v t="zoomq.20120820121523.7437"><vh>__genRESTargs</vh></v>
<v t="zoomq.20120820121523.7442"><vh>__genRESTsign</vh></v>
<v t="zoomq.20120820121523.7439"><vh>call2sae</vh></v>
</v>
<v t="zoomq.20130918155053.7058"><vh>lbTC:L:: utility.py</vh>
<v t="zoomq.20130918155053.7059"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130918155053.7060"><vh>__popen</vh></v>
<v t="zoomq.20130918155053.7061"><vh>TSTAMP()</vh></v>
<v t="zoomq.20130918155053.7062"><vh>INCR4MO</vh></v>
<v t="zoomq.20130918155053.7063"><vh>GENID()</vh></v>
<v t="zoomq.20130918155053.7064"><vh>CHK4MANIFEST</vh></v>
<v t="zoomq.20130918155053.7065"><vh>HEX2RGB</vh></v>
<v t="zoomq.20130918155053.7066"><vh>FIX_manifest</vh></v>
<v t="zoomq.20130918155053.7067"><vh>LOAD4JSON</vh></v>
<v t="zoomq.20130918155053.7068"><vh>LOAD2JSON</vh></v>
<v t="zoomq.20130918155053.7069"><vh>_genArgsStr</vh></v>
<v t="zoomq.20130918155053.7070"><vh>_genQueryArgs</vh></v>
<v t="zoomq.20130918155053.7071"><vh>_chkQueryArgs</vh></v>
<v t="zoomq.20130918155053.7072"><vh>_query2dict</vh></v>
<v t="zoomq.20130918155053.7073"><vh>HISIT()</vh></v>
<v t="zoomq.20130918155053.7074"><vh>EXP2PNG</vh></v>
<v t="zoomq.20130918155053.7075"><vh>EXP4IMG</vh></v>
<v t="zoomq.20130918155053.7076"><vh>COLOR2CHK</vh></v>
<v t="zoomq.20130918155053.7077"><vh>__USE4COLOR</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5543" a="E"><vh>web</vh>
<v t="zoomq.20120723102156.5545"><vh>@nosent __init__.py</vh>
<v t="zoomq.20120723102156.5546"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120723102156.5548"><vh>/</vh></v>
<v t="zoomq.20120727213305.14707"><vh>404+各种默认处理</vh></v>
</v>
<v t="zoomq.20120723102156.5561" a="E"><vh>@nosent mana4api.py</vh>
<v t="zoomq.20120723102156.5562"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130918155053.5760"><vh>GET  /echo</vh></v>
<v t="zoomq.20130923093950.8570"><vh>__echo_txt()</vh></v>
<v t="zoomq.20130918155053.7083" a="E"><vh>POST /echo</vh>
<v t="zoomq.20130923093950.8817"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8816"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8567"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8563"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8564"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8565"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8566"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.13050"><vh>/api/sysincr</vh></v>
<v t="zoomq.20120727213305.14707"></v>
</v>
</v>
<v t="zoomq.20120727213305.14715"><vh>templates</vh>
<v t="zoomq.20120812115324.4334"><vh>&lt;&lt;sspathdefine&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14728"><vh>BASE组件</vh>
<v t="zoomq.20120710140424.5449"><vh>@nosent base.html</vh>
<v t="zoomq.20120812115324.4334"></v>
<v t="zoomq.20120710140424.5453"><vh>CSS</vh>
<v t="zoomq.20120804110957.4149"><vh>esp. 警告...</vh></v>
<v t="zoomq.20120804110957.4148"><vh>表单相关</vh></v>
<v t="zoomq.20120804110957.4147"><vh>textarea+select</vh></v>
<v t="zoomq.20120727213305.14772"><vh>button</vh></v>
<v t="zoomq.20120727213305.14773"><vh>a as button</vh></v>
<v t="zoomq.20120727213305.14781"><vh>a as btn in &lt;sub&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.14749"><vh>validatious.1.0.5.min.css</vh></v>
</v>
<v t="zoomq.20120727213305.14737"><vh>@nosent manav.html</vh></v>
<v t="zoomq.20120727213305.14705"><vh>@nosent 404.html</vh></v>
</v>
<v t="zoomq.20120727213305.14717"><vh>@nosent index.html</vh></v>
</v>
<v t="zoomq.20120717112543.5493"><vh>__chaos</vh>
<v t="zoomq.20120727213305.14743"><vh>&lt;&lt;validate&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14734"><vh>表单JS验证</vh></v>
<v t="zoomq.20120727213305.14730"><vh>用户crx升级</vh>
<v t="zoomq.20120727213305.14723"><vh>crxup.html</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5539"><vh>3party</vh>
<v t="zoomq.20130918155053.8973"><vh>@nosent __init__.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20120710140424.5446">creat API+admin srv for lb-crx publish mana.</t>
<t tx="zoomq.20120710140424.5447">@language markdown
# 珠海GDG 微信综合管理服务
~ base 珠三角技术沙龙活动综合管理应用

## 主要开发人员：
- jeff @jeff_kit

## 主要功能

- 查询过往活动
- 报名参加指定活动
- 查询历史报名情况
- 查询社区关键信息
- 自动发送提醒邮件

## Change logging

- 130806 frok from gztechparty/techparty

</t>
<t tx="zoomq.20120710140424.5449">@language html
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN"&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" &gt;

&lt;&lt;sspathdefine&gt;&gt;

  &lt;title&gt;
{% block title4act %}
{% endblock%}- weknow v13.09.18.2&lt;/title&gt;

{% block headJS %}
{% endblock%}

    &lt;style type="text/css"&gt;
@others
    &lt;/style&gt;
&lt;/head&gt;

{% block body %}
&lt;body&gt;
{% endblock%}

&lt;div id="mainbody"&gt;
    {% block mainbody %}
    {% endblock%}
&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;hr/&gt;
    &lt;/div&gt;
&lt;div id="footbar"&gt;
    {% block footernav %}
    {% endblock%}
    |&lt;a href="http://crxdoczh.readthedocs.org/en/latest/5-more/lb4crx/index.html"&gt;帮助&lt;/a&gt;

    &lt;div id="poweredby"&gt;
    &lt;b&gt;powered by:&lt;/b&gt;
        &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;
        ,&lt;a href="http://bottle.paws.de/"&gt;Bottle&lt;/a&gt;
        ,&lt;a href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;
        ,&lt;a href="http://sae.sina.com.cn"&gt;SAE&lt;/a&gt;
        ,&lt;a href="http://www.catb.org/hacker-emblem/"&gt;Hacker&lt;/a&gt;
     &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

{% block footerJS %}
{% endblock%}
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20120710140424.5453">@language css
body{overflow-x:hidden}
body,img,a,div,span,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,textarea,th,td,tr,input{
    margin:0;padding:0
}
body { 
    background: #fefefe; color: #343434; 
    margin: 1em; padding: 0; font-size:105%;
}
h1,h2,h3,h4,h5,h6{
    margin:20px 0 10px 0;
    border-radius:5px;
    padding-left: 15px;
}
h1{
    background: #EBFAFF;
}
h2{
    background: #D1F4FF;
}
h3{
    background: #B8EEFF;
}
h4{
    background: #9EE8FF;
}

input,pre,body,button,select,textarea{
    font:14px/28px Segoe UI,Tahoma,Verdana,Arial,Helvetica,sans-serif
}


img { border: none }
hr {
  width : 100%;
  height : 2px;
  background : #efefef;
  border : 1px solid #ddd;
  clear : both;
}
div#poweredby{
  float : right;
}

a {color:#333;}
a:hover {color:blue;}

del {font-size:95%; color:#555;}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .btnw */
span.right{
    float:right;
}
.btnw{
    border:1px solid #ccc;
    height:42px;
    display:inline-block;
}
.btn::-moz-focus-inner{border:0}


@others



@-moz-document domain(){
    .btnw button{padding:0 27px 0 27px}
    }








</t>
<t tx="zoomq.20120710140424.5454">@language yaml
---
name: weknow
version: 3

</t>
<t tx="zoomq.20120710140424.5455">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)

'''
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)


from bottle import *
import sae

APP = Bottle()
application = sae.create_wsgi_app(APP)

@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    print request.query.keys()
    print request.query.echostr
    return request.query.echostr

'''
</t>
<t tx="zoomq.20120710140424.5456">#管理员邮箱列表
ADMIN_EMAIL_LIST = ['zoomquiet+gdg@gmail.com']

@others

</t>
<t tx="zoomq.20120717112543.5481">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

@others

if __name__ == '__main__':
    if 2 != len(sys.argv) :
        print '''Usage:
            utility.py test
        '''
    else:
        print "hand testing ..."
        #MANIFEST4CRX(open('../../elf.crx', "rb").read())
        #print GENID('sae',"sdfsdfsd")
        #print GENID('crx')
        #print INIobjSYS('cc')
        #print 'increase by KVDB: %s' % INCR4KV()
        #print 'increase by Memcache: %s' % INCR4MM()
    
</t>
<t tx="zoomq.20120717112543.5493">    '''
    #return "You missed a field."
    #"Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
    #return "You missed a field."
    #return template('upcrx.tpl')

    #return
    
    #print dir(data.file)
    #print type(data.file)
    # GET某个domain下的object
    #ob = s.get('crx4lb', data.filename)
    #print dir(ob)
    #print "\ttype(ob)", type(ob)
    #sdata = ob.data
    #print sdata
    #AppID = crx_id.GetCRXAppID4upload(data.file)
    #AppID = crx_id.GetCRXAppID4upload(sdata)
    #print 'AppID: %s' % AppID
    #data.file.seek(0)
    #print "data.file.closed", data.file.closed
    #print len(raw)
    raw = ""
    if name and data.file:
        while True:
            datachunk = data.file.read(1024)
            if not datachunk:
                break
            raw = raw + datachunk

        filename = data.filename

    try:
        buf = data.file.read(data.bufsize)
        while True:
            buf = data.file.read(data.bufsize)
            if not buf:
                break
            print data.bufsize
        #outfile.close()
        #return 'Uploaded %s !' % upfile.filename        
    except Exception,e:
        print e.message
        return 'Failed in uploading %s !' % data.filename

    @route('/upload', method='POST')
def do_upload():
    try:
        filename = request.POST.get('Filename')
        root, ext = os.path.splitext(filename)
        assert ext[1:].lower() in ALLOWED_TYPE, "Invalid file type: " + ext
        if not os.path.isdir(UPLOAD_BASE):
            os.makedirs(UPLOAD_BASE)
        filedata = request.POST.get('Filedata')
        assert filedata is not None, "Invalid Upload data."
        with open(os.path.join(UPLOAD_BASE, filename), 'wb') as f:
            shutil.copyfileobj(filedata.file, f, 8192)
    except AssertionError, e:
        abort(403, str(e))
    else:
        return filename

    '''
</t>
<t tx="zoomq.20120720204727.3913">@language python
@tabwidth -4

Path design

    /   ~ readme

- for dev.:
    /up
    /up/crx            &gt; CRX:x:id
    /up/:crx-id       &gt; CRX:x:id
    /up/:crx-id/ed  &gt; CRX:x:id
    /up/list            &gt; TEAM:t:id-&gt;crxs-&gt;CRX:x:id
    /up/team        &gt; TEAM:t:id
    /up/team/ed &gt; TEAM:t:id
    /up/load
    
- for admin:
    /mana       索引
    #/mana/st    状态
    /mana/ini    状态
    /mana/crx        &gt; CRX:x:id
    /mana/pub       &gt; SYS:crx:updated
    /mana/teams   &gt; SYS:teams:all
    /mana/classes &gt; SYS:classes:all
    /mana/class     &gt; TAG:gid-&gt;x:id
    /mana/reco      &gt; ??
    /mana/gen       &gt; 动态!
        /prestore
            /:classid
            /:crxid
    
- for api
    /api
    /api/st
        + 整体
        + /:x:id
        + /:c:id
        + /:t:id
    /api/ct
</t>
<t tx="zoomq.20120720204727.3914">@language python
@tabwidth -4

sae.kvdb:
    服务限制:
        key的最大长度：200字节
        value的最大长度：4M （默认启用压缩）
        mget获取的最大KEY个数：32
        pkrget获取的最大KEY个数：100

abt. TOT:
    - 0++

abt. SYS:
- crxs:crtnew = [,,]
- crxs:all = [x:id,,,]
- teams:all = [x:id,,,]
- tags:all = [x:id,,,]
- h:id = HASH(YYMMddhhssmmm+HIS+0)
    + hisctrl = [hisid,hisid,...]
    
abt. CRX:
- x:id = HASH(YYMMddhhssmmm+CRX++0)
    + sid
    + name
    + version
    + date
    + desc
    + detail
    + hisid = x:id
    + img [sid,sid,,,]
    + classid
    + dlrank=1111
    + gsrank=***
    + gsdl=100000
    + gsusr=50000
    + isbd = 0
    + isreco = 0
    
abt. PIC:
- p:id = HASH(YYMMddhhssmmm+PIC++0)
    + sid
    + type = XXXL|XXL|XL|L|M
    + icon=0
    + reco=0
    + note=1
    + order=0
    
abt. GROUP:
- g:id = HASH(YYMMddhhssmmm+GRP++0)
    + name
    + mail
    + weibo
    + desc
    + lead
    + hisid = x:id
    + crxs
        + [x:id,x:id,,,]

abt. TAG:
- t:id = HASH(YYMMddhhssmmm+TAG++0)
    + tagname
    + tagid
    + hisid = x:id
    + recos =  [x:id,x:id,,,]
    + crxs =  [x:id,x:id,,,]

</t>
<t tx="zoomq.20120723102156.5539">@path 3party</t>
<t tx="zoomq.20120723102156.5541">@path module</t>
<t tx="zoomq.20120723102156.5543">@path web


- passwdaccess: if(path ~ "/up") passwd "up:up"
- passwdaccess: if(path ~ "/mana") passwd "mana:mana"

</t>
<t tx="zoomq.20120723102156.5544">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 全局值
class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind
    
    &lt;&lt;cfg4Borg&gt;&gt;
    VERSION = "weknow v13.09.18"
    
CFG = Borg()

</t>
<t tx="zoomq.20120723102156.5545">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
APP = Bottle()
#APP.mount('/up', __import__('mana4up').APP)
APP.mount('/api', __import__('mana4api').APP)
#APP.mount('/mana', __import__('mana4sys').APP)

@others

if __name__ == '__main__':
    debug(True)
    #0.0.0.0
    run(app, host="0.0.0.0",reloader=True)
</t>
<t tx="zoomq.20120723102156.5546">#!/usr/bin/python
# -*- coding: utf-8 -*-

from bottle import *
from bottle import __version__ as bottleVer
from bottle import jinja2_template as template
from config import JINJA2TPL_PATH
TEMPLATE_PATH.insert(0, JINJA2TPL_PATH)



</t>
<t tx="zoomq.20120723102156.5548">@APP.route('/')
#@view('404.html')
def index():
    return template('index.html')

</t>
<t tx="zoomq.20120723102156.5561">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG

debug(True)
APP = Bottle()

KV = CFG.KV #sae.kvdb.KVClient(debug=1)
#SG = sae.storage.Client()

@others




</t>
<t tx="zoomq.20120723102156.5562">import time
from datetime import datetime
import traceback
import hashlib
from copy import deepcopy
import xml.etree.ElementTree as etree

#import sae
#import sae.storage
#import sae.kvdb

#from wechat.official import WxNewsResponse
#from wechat.official import WxTextResponse

from bottle import *
from bottle import __version__ as bottleVer
from bottle import jinja2_template as template

#from auth import auth_required, sha256_uhex
#from lb4crx2cli import __genRESTsign

from utility import INCR4KV as __incr
from utility import TSTAMP, GENID
#from utility import POP4KV, POP4LIST, INS2LIST, INS2DICT4LIST, IDX4LIST
#from utility import ST4CRX, KV4CRX, KV4GRP
#from utility import INIobjSYS, PUTHIS, PUT2SS, PUT_PIC4CRX
</t>
<t tx="zoomq.20120727213305.13050">@APP.route('/sysincr')
#@APP.route('/&lt;ddd&gt;/sysincr')
def sysincr():
    from utility import INCR4KV as __incr
    #kv = sae.kvdb.KVClient()
    #print  kv.get_info()
    return str(__incr())
    
    '''
    kv = sae.kvdb.KVClient()
    print dir(kv)
    print kv.get_info()
    print kv.get("TOT")
    
    if not kv.get("TOT"):
        kv.add("TOT", 1)
    print kv.get("TOT")
    print type(kv.get("TOT")+1)
    
    kv.replace("TOT",kv.get("TOT")+1)
    print kv.get("TOT")
    
    return str(kv.get("TOT"))
    '''



</t>
<t tx="zoomq.20120727213305.14687">@language python
@tabwidth -4
#!/usr/bin/env python
# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

""" Read a CRX file and write out the App ID and the Full Hash of the ID.
See: http://code.google.com/chrome/extensions/crx.html
and 'http://stackoverflow.com/questions/'
  + '1882981/google-chrome-alphanumeric-hashes-to-identify-extensions'
for docs on the format.
"""

@others

if __name__ == '__main__':
  sys.exit(main(sys.argv))

</t>
<t tx="zoomq.20120727213305.14688">
import sys
import hashlib


EXPECTED_CRX_MAGIC_NUM = 'Cr24'
EXPECTED_CRX_VERSION = 2


</t>
<t tx="zoomq.20120727213305.14689">def usage(argv):
  print "%s: crx_file" % argv[0]

</t>
<t tx="zoomq.20120727213305.14690">def HexToInt(hex_chars):
  """ Convert bytes like \xab -&gt; 171 """
  val = 0
  for i in xrange(len(hex_chars)):
    val += pow(256, i) * ord(hex_chars[i])
  return val

</t>
<t tx="zoomq.20120727213305.14691">def HexToMPDecimal(hex_chars):
  """ Convert bytes to an MPDecimal string. Example \x00 -&gt; "aa"
      This gives us the AppID for a chrome extension.
  """
  result = ''
  base = ord('a')
  for i in xrange(len(hex_chars)):
    value = ord(hex_chars[i])
    dig1 = value / 16
    dig2 = value % 16
    result += chr(dig1 + base)
    result += chr(dig2 + base)
  return result

</t>
<t tx="zoomq.20120727213305.14692">def HexTo256(hex_chars):
  """ Convert bytes to pairs of hex digits. E.g., \x00\x11 -&gt; "{0x00, 0x11}"
      The format is taylored for copy and paste into C code:
      const uint8 sha256_hash[] = { ... }; """
  result = []
  for i in xrange(len(hex_chars)):
    value = ord(hex_chars[i])
    dig1 = value / 16
    dig2 = value % 16
    result.append('0x' + hex(dig1)[2:] + hex(dig2)[2:])
  return '{%s}' % ', '.join(result)

</t>
<t tx="zoomq.20120727213305.14693">def GetPublicKey(f):
  magic_num = f.read(4)
  if magic_num != EXPECTED_CRX_MAGIC_NUM:
    raise 'Invalid magic number: %s (expecting %s)' % (magic_num,
                                                       EXPECTED_CRX_MAGIC_NUM)
  version = f.read(4)
  if not version[0] != EXPECTED_CRX_VERSION:
    raise 'Invalid version number: %s (expecting %s)' % (version,
                                                         EXPECTED_CRX_VERSION)
  pub_key_len_bytes = HexToInt(f.read(4))
  sig_len_bytes = HexToInt(f.read(4))
  pub_key = f.read(pub_key_len_bytes)
  return pub_key

</t>
<t tx="zoomq.20120727213305.14694">def GetCRXHash(filename):
  f = open(filename, 'rb')
  pub_key = GetPublicKey(f)
  f.close()
  pub_key_hash = hashlib.sha256(pub_key).digest()
  return HexTo256(pub_key_hash)

</t>
<t tx="zoomq.20120727213305.14695">def GetCRXAppID(filename):
  f = open(filename, 'rb')
  pub_key = GetPublicKey(f)
  f.close()
  pub_key_hash = hashlib.sha256(pub_key).digest()
  # AppID is the MPDecimal of only the first 128 bits of the hash.
  return HexToMPDecimal(pub_key_hash[:128/8])


</t>
<t tx="zoomq.20120727213305.14696">def GetCRXAppID4upload(file):
  f = file
  pub_key = GetPublicKey(f)
  #f.close()
  pub_key_hash = hashlib.sha256(pub_key).digest()
  # AppID is the MPDecimal of only the first 128 bits of the hash.
  return HexToMPDecimal(pub_key_hash[:128/8])

</t>
<t tx="zoomq.20120727213305.14697">def main(argv):
  if len(argv) != 2:
    usage(argv)
    return 1
  print 'Raw Bytes: %s' % GetCRXHash(sys.argv[1])
  print 'AppID: %s' % GetCRXAppID(sys.argv[1])


</t>
<t tx="zoomq.20120727213305.14698">import os
import sys
import traceback
from copy import deepcopy
from time import time, gmtime, strftime, localtime
import hashlib

from config import CFG
_k4incr = CFG.TOT
#import sae.storage
#import sae.kvdb
KV = CFG.KV #sae.kvdb.KVClient()

# KVDB or Memcache global sys. event count KEY





</t>
<t tx="zoomq.20120727213305.14699">def INCR4KV():
    '''BASE KVDB make GLOBAL increaser
    '''
    #print CFG.KEY4_incr
    #print None == CFG.KV.get(CFG.KEY4_incr)
    if None == KV.get(CFG.KEY4_incr):
        #print "\t EMPTY?!"
        KV.add(CFG.KEY4_incr, 0)
    else:
        #print "\t incr. BASE HISTORIC"
        KV.set(CFG.KEY4_incr, KV.get(CFG.KEY4_incr)+1)
    return KV.get(CFG.KEY4_incr)





</t>
<t tx="zoomq.20120727213305.14701">def INCR4MM():
    '''BASE Memcache make GLOBAL increaser
    '''
    import pylibmc
    
    mc = pylibmc.Client()
    if not mc.get(_k4incr):
        mc.set(_k4incr, 1111)
    else:
        mc.incr(_k4incr)
    return mc.get(_k4incr)



</t>
<t tx="zoomq.20120727213305.14705">@language html
{% extends "base.html" %}

{% block title4act %}
404
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat:404(Bottle版) &lt;/h1&gt;

&lt;h2&gt;真心没作呢,介事儿&lt;/h2&gt;

吼这位:-(
&lt;pre&gt;
zoomquiet+lb4crx2srv # gmail.com
&lt;/pre&gt;
{% endblock %}

{% block footernav %}
:-[
{% endblock %}



</t>
<t tx="zoomq.20120727213305.14707">#@view('404.html')
@APP.error(404)
def error404(error):
    return template('404.html')

@APP.route('/favicon.ico')
def favicon():
    abort(204)
    
@APP.route('/static/&lt;filename&gt;')
def server_static(filename):
    return static_file(filename, root='static')
    </t>
<t tx="zoomq.20120727213305.14708">+ 排序
    - 周下载
        - 每日统计
        - Ajax 动态统计
        &lt;-  Taskqueue 异步进行
        &lt;&lt;- AngularJS
        &gt;&gt; 防攻击!
        
    - 更新更动
    - rate
    - 编辑之选
    
+ 活跃度! &lt;- api 配合
+ SEO
+ 搜索!

</t>
<t tx="zoomq.20120727213305.14715">@path templates

#for local debug:
{% set sspath4pic = "http://localhost:8080/stor-stub/pic2lb" %}
{% set sspath4crx = "http://localhost:8080/stor-stub/crx4lb" %}

#for SAE debug:
{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}

{% set sspage2crx = "http://lb4crx-page4crx.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120727213305.14717">@language html
{% extends "base.html" %}

{% block title4act %}
index
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat 响应后台(Bottle版) =&lt;/h1&gt;

是也乎;-)


{% endblock %}

{% block footernav %}
:-}
{% endblock %}


</t>
<t tx="zoomq.20120727213305.14723">@language html
{% extends "base.html" %}

{% block title4act %}
up
    {% endblock %}

{% block headJS %}
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}

{% block mainbody %}
&lt;h2&gt;猎豹国产原创扩展:上传&lt;/h2&gt;

&lt;form action="/up/crx" method="post" enctype="multipart/form-data" class="validate"&gt;
  名称:&lt;input type="text" name="name" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;
  文件:&lt;input type="file" name="data" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;

&lt;span id="reply_submit" class="btnw"&gt;
    &lt;button type="submit" class="action"&gt;就酱&lt;/button&gt;
&lt;/span&gt;

&lt;/form&gt;
    {% endblock %}

{% block footernav %}
:-]
    {% endblock %}

</t>
<t tx="zoomq.20120727213305.14728">基础模板组
</t>
<t tx="zoomq.20120727213305.14730"></t>
<t tx="zoomq.20120727213305.14734">
{% block headJS %}
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}
</t>
<t tx="zoomq.20120727213305.14737">@language html
导航:&lt;a href="/"&gt;首页&lt;/a&gt;
|&lt;a href="/mana"&gt;管理&lt;/a&gt;
|&lt;a href="/api"&gt;接口&lt;/a&gt;


</t>
<t tx="zoomq.20120727213305.14743">@language js
new FormValidator('upcrxform', [{
    name: 'crxname',
    display: 'required',    
    rules: 'required|min_length[4]'
}, {
    name: 'crxfile',
    display: 'required',    
    rules: 'required'
}], function(errors, event) {
    var SELECTOR_ERRORS = $('.error_box'),
        SELECTOR_SUCCESS = $('.success_box');
        
    if (errors.length &gt; 0) {
        SELECTOR_ERRORS.empty();
        
        for (var i = 0, errorLength = errors.length; i &lt; errorLength; i++) {
            SELECTOR_ERRORS.append(errors[i].message + '&lt;br /&gt;');
        }
        
        SELECTOR_SUCCESS.css({ display: 'none' });
        SELECTOR_ERRORS.fadeIn(200);
    } else {
        SELECTOR_ERRORS.css({ display: 'none' });
        SELECTOR_SUCCESS.fadeIn(200);
    }
    
    if (event &amp;&amp; event.preventDefault) {
        event.preventDefault();
    } else if (event) {
        event.returnValue = false;
    }
});

</t>
<t tx="zoomq.20120727213305.14749">@language css

/**
 * TERMS OF USE - Validatious 2.0
 * Open source under the BSD License.
 * Copyright 2008 Christian Johansen.
 * All rights reserved.
 */
.error{color:#900;background:#f8f8f8;}
.error .messages,.error .messages li{list-style:none;}
.error .messages{font-size:1em;padding:.6667em 0 0 1em;}
</t>
<t tx="zoomq.20120727213305.14750">import sys
import os.path
app_root = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(app_root, "3party/"))
sys.path.insert(0, os.path.join(app_root, "module/"))
sys.path.insert(0, os.path.join(app_root, "web/"))
#   指定的模板路径
JINJA2TPL_PATH = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__)
        , "templates/")
    )

#import hashlib</t>
<t tx="zoomq.20120727213305.14751">def KV4CRX(uuid, action):
    '''.crx 状态 KV 列表统一切换器:
        - 对扩展的所有状态对应的组合映射到一批列表中
      act\KV|crx try out bak arch api4cx 
        新增  0   1   0   0    0   0   (请求上架)    
        回退  0   0   0   1    0   0    
        上架  1   0   0   0    0   1   
        下架  0   0   1   0    0   0   
        归档  0   0   0   0    1   0   
        回收  0   1   0   0    0   0   
    '''
    #print uuid
    #KV = sae.kvdb.KVClient()
    k4crx, crcrxs = INIobjSYS('crx')
    k4try, crtrys = INIobjSYS('try')
    k4out, crouts = INIobjSYS('out')
    k4bak, crbaks = INIobjSYS('bak')
    k4arc, crarch = INIobjSYS('arch')
    k4ctc, ctcapi = INIobjSYS('api4cx')
    try:
        if "ini" == action:
            POP4KV(uuid, k4crx, crcrxs)
            INS2KV(uuid, k4try, crtrys)
            POP4KV(uuid, k4out, crouts)
            POP4KV(uuid, k4bak, crbaks)
            POP4KV(uuid, k4arc, crarch)
            POP4KV(uuid, k4ctc, ctcapi)
        elif "bak" == action:
            POP4KV(uuid, k4crx, crcrxs)
            POP4KV(uuid, k4try, crtrys)
            POP4KV(uuid, k4out, crouts)
            INS2KV(uuid, k4bak, crbaks)
            POP4KV(uuid, k4arc, crarch)
            POP4KV(uuid, k4ctc, ctcapi)
        elif "recover" == action:
            POP4KV(uuid, k4crx, crcrxs)
            INS2KV(uuid, k4try, crtrys)
            POP4KV(uuid, k4out, crouts)
            POP4KV(uuid, k4bak, crbaks)
            POP4KV(uuid, k4arc, crarch)
            POP4KV(uuid, k4ctc, ctcapi)
        elif "pub" == action:
            INS2KV(uuid, k4crx, crcrxs)
            POP4KV(uuid, k4try, crtrys)
            POP4KV(uuid, k4out, crouts)
            POP4KV(uuid, k4bak, crbaks)
            POP4KV(uuid, k4arc, crarch)
            INS2KV(uuid, k4ctc, ctcapi)
        elif "out" == action:
            POP4KV(uuid, k4crx, crcrxs)
            POP4KV(uuid, k4try, crtrys)
            INS2KV(uuid, k4out, crouts)
            POP4KV(uuid, k4bak, crbaks)
            POP4KV(uuid, k4arc, crarch)
            POP4KV(uuid, k4ctc, ctcapi)
        elif "arch" == action:
            POP4KV(uuid, k4crx, crcrxs)
            POP4KV(uuid, k4try, crtrys)
            POP4KV(uuid, k4out, crouts)
            POP4KV(uuid, k4bak, crbaks)
            INS2KV(uuid, k4arc, crarch)
            POP4KV(uuid, k4ctc, ctcapi)
    except:
        print "&gt;&gt;&gt;KV4CRX(uuid)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    print "\t crcrxs:",crcrxs
    print "\t crtrys:",crtrys
    print "\t crouts:",crouts
    print "\t crbaks:",crbaks
    print "\t crarch:",crarch
    print "\t ctcapi:",ctcapi
    
    return crcrxs, crtrys, crouts, crbaks, crarch, ctcapi



</t>
<t tx="zoomq.20120727213305.14756">def INIobjSYS(key):
    '''try and init. all kinds of objSYS K/V
    '''    
    if key not in CFG.K4D.keys():
        return None
    else:
        #print CFG.K4D[key]
        if not KV.get(CFG.K4D[key]):
            KV.add(CFG.K4D[key],[])
        return CFG.K4D[key], KV.get(CFG.K4D[key])




</t>
<t tx="zoomq.20120727213305.14772">.btnw button {
    font-size:16px;
    text-align:center;
    overflow:visible;
    height:42px;
    padding:0 28px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw button:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw button:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}

</t>
<t tx="zoomq.20120727213305.14773">.btnw a {
    text-decoration: none;
    font-size:16px;
    text-align:center;
    overflow:visible;
    padding:0 28px;
    height:40px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120727213305.14781">#iterm sub{
    float: right; padding: 0; margin: 5px 0 0 0; 
    border-bottom: 1px dotted #ccc;
    height:22px; line-height:22px; 
    overflow:hidden;
}

#iterm .btnwa{
    display:inline-block;
    border:1px solid #ccc;
    height:22px;
}
#iterm .btnwa a {
    text-decoration: none;
    font-size:12px;
    text-align:center;
    overflow:visible;
    padding:0 18px;
    height:22px;
    line-height:22px;
    vertical-align:text-bottom;

    z-index:1;
    display:inline-block;
    border:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

#iterm .btnwa a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

#iterm .btnwa a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120727213305.3937">@language python
@tabwidth -4

mana/initea
    + teaminfo ~ up/:teamid
mana/upcrx
    + crxinfo</t>
<t tx="zoomq.20120802192540.5463">def IDX4LIST(idx, KV):
    '''BASE idx list collection all Obj. into List
    '''
    #print "\tIDX4LIST(idx, KV):", idx
    #print "\t len(idx):", len(idx)
    if 0 == len(idx):
        return None
        
    exp = []
    for i in idx:
        exp.append(KV.get(i))
    if 0 == len(exp):
        return None
    else:
        return exp



</t>
<t tx="zoomq.20120802192540.5468">def GENID(obj, name=""):
    '''通用ID生成器:
        yymmddHHMMSS+5位微秒+对象鍵3位+全局序号
        e.g.
        x:12080110561431076:CRX1111
    '''
    timestamp = TSTAMP()
    tot = INCR4KV()
    #sha1name = hashlib.sha1(name).hexdigest()
    GOBJMAP = {'his':'h:%(timestamp)s:HIS%(tot)d'
        ,'tag':'t:%(timestamp)s:TAG%(tot)d'
        ,'event':'e:%(timestamp)s:EVE%(tot)d'
        ,'usr':'u:%(name)s'
        }
    if obj in GOBJMAP.keys():
        return GOBJMAP[obj]% locals()
    else:
        return None



</t>
<t tx="zoomq.20120802192540.7100">def TSTAMP():
    '''通用时间戳生成器:
        yymmddHHMMSS+5位微秒
        e.g.
        12080110561431076
    '''
    date = strftime("%y%m%d%H%M%S", localtime())
    mms = "%.5f"% time()
    ms = mms[-5:]
    return "%s%s"% (date, ms)




</t>
<t tx="zoomq.20120802192540.8726">def PUTHIS(crobjs, act):
    '''put any obj. into SYS:his
        + copy obj. as new h:id KV
        + return h:id
    '''
    his = deepcopy(CFG.objHis)
    hid = GENID('his')
    his['id'] = hid
    his['hisobj'] = deepcopy(crobjs)
    his['hisact'] = act
    his['tstamp'] = TSTAMP()
    #   appended into KVDB
    KV.add(his['id'],his)
    #   collected into SYS:his
    k4his, crthis = INIobjSYS("his")
    INS2KV(hid, k4his, crthis)
    #print "\tSYS:his:", KV.get(k4his)
    return hid



</t>
<t tx="zoomq.20120802192540.8728">def INS2KV(xid, k4obj, crobjs):
    #k4obj, crobjs = INIobjSYS(sysk)
    try:
        if xid in crobjs:
            pass
        else:
            crobjs.append(xid)
            KV.set(k4obj, crobjs)
    except:
        print "&gt;&gt;&gt;INS2KV(xid, sysk)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    return True



</t>
<t tx="zoomq.20120804110957.4144">def POP4KV(xid, k4obj, crobjs):
    try:
        #k4obj, crobjs = INIobjSYS(sysk)
        if xid in crobjs:
            crobjs.pop(crobjs.index(xid))
            KV.set(k4obj, crobjs)
        else:
            pass
    except:
        print "&gt;&gt;&gt;POP2KV(xid, sysk)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    return True



</t>
<t tx="zoomq.20120804110957.4146">def PUT2SS(raw, fname, actype):
    '''put file into SAE.storage
        + return s:id
    '''
    if 'sae' == actype:
        sid = "%s.crx"% GENID('sae', fname)
        domain = CFG.D2X
    elif 'pic' == actype:
        sid = "%s.%s"% (GENID('pic'), fname.split(".")[-1])
        domain = CFG.D2P
    elif 'html' == actype:
        sid = "%s.html"% fname
        domain = CFG.D4P
        
    #print "\n PUT2SS:", sid
    #   初始化一个Storage客户端。
    ss = sae.storage.Client()
    ob = sae.storage.Object(raw)
    ss.put(domain, sid, ob)
    uri = ss.url(domain, sid)
    return sid, uri



</t>
<t tx="zoomq.20120804110957.4147">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ by 42qu.com 
input,button,select,textarea{font-size:16px;line-height:28px}

*/
input,button,select,textarea{
    font-size:14px;line-height:28px
}
div{cursor:default}

input{  
    font-size:22px;
    line-height:36px;
    height:42px;
    padding:4px 3px;
    border:1px solid #ddd;
    width:27em;
}
input.checkbox{
    font-size:22px;
    line-height:24px;
    height:24px;
    width:auto;

}  

#optradios input{
    font-size:18px;line-height:22px;height:26px;
    padding:0px;
    border:1px solid #ddd;
    width:1em;
}
    
select{
    font-size:16px;line-height:18px;
    padding:8px;
    text-align:center;border:1px solid #ccc;
    margin-right:8px;
    width:120px;
}

textarea{
    font-size:22px;
    overflow:auto;resize:none;
    border:1px solid #ccc;
    padding:4px 3px;
    margin:0;
    width:27em;
}
</t>
<t tx="zoomq.20120804110957.4148">ul li {font-size:120%;
    line-height: 36px;
    border-top:1px dotted #aaa;
    width:98%;
    list-style-type:none;
    padding: 5px 0px 0px 10px;
}
ul li.textarea3 {
    height: 108px;
    border: 0px dotted #930;
}
ul li.textarea1 {
    height: 50px;
    border: 0px dotted #930;
}
.even{
    background: #FFF4DB;
}
ul.asform li{
    display:inline-block; 
    vertical-align:top; 
    border-top:0px dotted #aaa;
}
.leftlabel{
    float: left;
}
.rightinput{
    float: right;
}
span.label{
    display:inline-block; 
    border: 1px solid #777;
    width:7em;
    padding: 5px;
    text-align:right;
}

ol li {font-size:120%;
    line-height: 24px;
    border-bottom:1px dotted #aaa;
    width:90%;
    list-style-type:none;
    margin-left: 20px;
}

sub,sup {font-size:10px; }
fieldset sub{
    color:#999;
}


fieldset{
    margin-top: 10px;
    padding: 20px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}
fieldset i{
    font-size: 70%;
    color: #787;
    margin-top: 10px;
    line-height:36px;
}

</t>
<t tx="zoomq.20120804110957.4149">b.alert{
    font-size: 150%;
    color: #930;
}


pre {
    font-weight：lighter;
    font-size: 80%;
    border: 4px dotted #fefefe;
    background : #ededed;
    padding: 5px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}

pre.desc {
    font-size: 14px;
    border: 2px dotted #ddd;
    background : #fefefe;
    padding: 10px;
    border-radius: 15px 0px 15px 0px;
    width:70%;
    display:inline-block;
}
</t>
<t tx="zoomq.20120804110957.4478">def ST4CRX(uuid):
    '''.crx 目前状态 统一检测器:
        - 从系统扩展状态索引系列列表中
        - 抽取出当前扩展的状态,返回为一组状态值
      act\KV|crx try out bak arch api4cx 
        待发  0   1   0   0    0   0       
        回退  0   0   0   1    0   0   
        上架  1   0   0   0    0   1   
        下架  0   0   1   0    0   0   
        归档  0   0   0   0    1   0   
        回收  0   1   0   0    0   0   
    '''
    #print uuid
    #KV = sae.kvdb.KVClient()
    k4crx, crcrxs = INIobjSYS('crx')
    k4try, crtrys = INIobjSYS('try')
    k4out, crouts = INIobjSYS('out')
    k4bak, crbaks = INIobjSYS('bak')
    k4arc, crarch = INIobjSYS('arch')
    incrx = (uuid in crcrxs)
    intry = (uuid in crtrys)
    inout = (uuid in crouts)
    inbak = (uuid in crbaks)
    inarch = (uuid in crarch)
    #print "\t in SYS:crx? %s"% incrx
    #print "\t in SYS:try? %s"% intry
    #print "\t in SYS:out? %s"% inout
    #print "\t in SYS:arch? %s"% inarch
    
    return incrx, intry, inout, inbak, inarch



</t>
<t tx="zoomq.20120804110957.4485">def POP4LIST(cnt, listobj):
    '''try safty pop SOMETHING from list
    '''
    try:
        idxcnt = listobj.index(cnt)
    except:
        print "&gt;&gt;&gt;POP4LIST(cnt, listobj)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    listobj.pop(idxcnt)
    return True






</t>
<t tx="zoomq.20120804110957.4489">def PUT_PIC4CRX(raw, fname, uuid):
    '''put pic into SAE.storage, REALY doing:
            + put into Storage
            + create new objPIC KV
            + append sid into SYS:pics
            + append sid into crx.pic
    #filename = picfile.filename
    if picfile is not None:
        raw = picfile.file.read() # This is dangerous for big files
        sid, uri = PUT2SS(raw, filename, 'pic')
        print uri
        picfile.file.close()
    '''
    sid, uri = PUT2SS(raw, fname, 'pic')
    #   + create new objPIC KV
    pic = deepcopy(CFG.objPIC)
    pic['note'] = sid
    KV.add(sid, pic)
    #   + append sid into SYS:pics
    #INS2KV(sid, k4pic, crpicss)
    k4pic, crpics = INIobjSYS('pic')
    crpics.append(sid)
    KV.set(k4pic, crpics)
    #print k4pic, crpics
    #   + append sid into crx.pic
    crcrx = KV.get(uuid)
    #   fixed 有可能的重复插入?
    crcrx['pic'].append(sid)
    crcrx['pic'] = list(set(crcrx['pic']))
    #KV.set(xid, crcrx)
    
    return sid, uri, crcrx



</t>
<t tx="zoomq.20120805183037.4187">def INS2LIST(cnt, listobj):
    '''try safty insert SOMETHING to list
    '''
    #print "\t&gt;&gt;&gt;", cnt, listobj
    listobj.append(cnt)
    return list(set(listobj)) # 防止意外重复



</t>
<t tx="zoomq.20120805183037.4193">def KV4GRP(uuid):
    '''.crx 状态对应 团队拥有 .crx 状态切换器:
        - 对扩展的所有状态对应的组合映射到一批列表中
      act\KV|crxs trys outs baks
        新增  0    1    0    0
        回退  0    0    0    1
        上架  1    0    0    0
        下架  0    0    1    0
        归档  0    0    0    0
        回收  0    1    0    0
    '''
    #print uuid
    grpid = KV.get(uuid)['grpid']
    if grpid:
        &lt;&lt;set crc grp 相关值列表&gt;&gt;
        return crtgrp['crxs'], crtgrp['trys'], crtgrp['outs'], crtgrp['baks']
    else:
        # grpid 为 None 时
        return None, None, None, None

    


</t>
<t tx="zoomq.20120805183037.5896">def INS2DICT4LIST(cnt, dictobj, keyname):
    '''try safty insert SOMETHING to list
    '''
    #print "\t&gt;&gt;&gt;", cnt, listobj
    if dictobj.has_key(keyname):
        listobj = dictobj[keyname]
        listobj.append(cnt)
        listobj  = list(set(listobj))
        #print "\t list(set(listobj))", listobj
    else:
        listobj = []
        listobj.append(cnt)
        dictobj[keyname] = listobj
        #print "\t dictobj[keyname]~", dictobj[keyname]
    return listobj, dictobj # 防止意外重复






</t>
<t tx="zoomq.20120805183037.5897">crtgrp = KV.get(grpid)
incrx, intry, inout, inbak, inarch = ST4CRX(uuid)
if incrx:
    crtgrp['crxs'], crtgrp = INS2DICT4LIST(uuid, crtgrp, 'crxs')
    POP4LIST(uuid, crtgrp['trys'])
    POP4LIST(uuid, crtgrp['outs'])
    POP4LIST(uuid, crtgrp['baks'])
elif intry:
    POP4LIST(uuid, crtgrp['crxs'])
    crtgrp['trys'], crtgrp = INS2DICT4LIST(uuid, crtgrp, 'trys')
    POP4LIST(uuid, crtgrp['outs'])
    POP4LIST(uuid, crtgrp['baks'])
elif inbak:
    POP4LIST(uuid, crtgrp['crxs'])
    POP4LIST(uuid, crtgrp['trys'])
    POP4LIST(uuid, crtgrp['outs'])
    crtgrp['baks'], crtgrp = INS2DICT4LIST(uuid, crtgrp, 'baks')
elif inout:
    POP4LIST(uuid, crtgrp['crxs'])
    POP4LIST(uuid, crtgrp['trys'])
    crtgrp['outs'], crtgrp = INS2DICT4LIST(uuid, crtgrp, 'outs')
    POP4LIST(uuid, crtgrp['baks'])
elif inarch:
    POP4LIST(uuid, crtgrp['crxs'])
    POP4LIST(uuid, crtgrp['trys'])
    POP4LIST(uuid, crtgrp['outs'])
    POP4LIST(uuid, crtgrp['baks'])
KV.set(grpid, crtgrp)

#print "\t crtgrp['crxs']:", crtgrp['crxs']
#print "\t crtgrp['trys']:", crtgrp['trys']
#print "\t crtgrp['outs']:", crtgrp['outs']

</t>
<t tx="zoomq.20120811092308.5970">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
#!/usr/bin/env python
import sys

if __name__ == '__main__':
    if 3 != len(sys.argv) :
        print '''Usage:
            data_uri.py /path/2/imgfile exp.base64
        '''
    else:
        imgf = sys.argv[1]
        expf = sys.argv[2]
        data_uri = open(imgf, "rb").read().encode("base64").replace("\n", "")
        img_tag = 'data:image/png;base64,{0}'.format(data_uri)
        open(expf,"w").write(img_tag)
        #print img_tag</t>
<t tx="zoomq.20120812115324.4334">{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120820121523.7422">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

@others

</t>
<t tx="zoomq.20120820121523.7423">'''base: ms4py / bottle-wiki / source — Bitbucket
	https://bitbucket.org/ms4py/bottle-wiki/src/1586473a6ce1/auth.py
'''
from bottle import request, HTTPError
from functools import partial
from hashlib import sha256

from config import CFG

import sae.kvdb
KV = sae.kvdb.KVClient()

</t>
<t tx="zoomq.20120820121523.7424">def check_login(username, password, fullpath):
    '''根据用户名,以及口令:
        - 明确是否登录
        - 明确是否有当前级别的权限!
    '''
    pw_hash = sha256_uhex(password)
    suname = sha256_uhex(username)
    usrid = "%s%s"% (CFG.PREUID, suname)
    crtusr = KV.get(usrid)
    #print fullpath.split("/")[1]
    #print type(CFG.LEVEL4USR[fullpath.split("/")[1]])
    #print type(crtusr['level'])
    if crtusr:
        crtPathLevel = CFG.LEVEL4USR[fullpath.split("/")[1]]
        if str(crtPathLevel) == str(crtusr['level']):
            print "'%s' had crt. path right ;-)"% username
            return True
        else:
            print "'%s' disallow crt. path ;-("% username
            return False
    else:
        print "'%s' NOT exist!"% username
        return False
    '''
    #print fullpath.split("/")[1]
    print CFG.LEVEL4USR[fullpath.split("/")[1]]
    usr = 1#KV.get("usr:%s"% str(sha256_uhex(username.decode('utf-8'))))
    if usr is None:
        return False
    #return usr.password == pw_hash
    return 1
    '''

</t>
<t tx="zoomq.20120820121523.7425">def auth_required(check_func=check_login, realm='bottle-authentication'):
    """
    Decorator for basic authentication. 
    
    "check_func" has to be a callable object with two 
    arguments ("username" and "password") and has to return 
    a bool value if login was sucessful or not.
    """
    def decorator(view):
        def wrapper(*args, **kwargs):
            try:
                user, password = request.auth
            except (TypeError, AttributeError):
                # catch AttributeError because of bug in bottle
                auth = False
            else:
                auth = check_login(user, password, request.fullpath)
                #print "\t path: ", request.keys()
                #print request.fullpath
            if auth:
                return view(*args, **kwargs)
            return HTTPError(401, 'Access denied!', 
                header={'WWW-Authenticate': 'Basic realm="%s"' % realm})
        return wrapper
    return decorator

</t>
<t tx="zoomq.20120820121523.7426">def sha256_uhex(data):
    ''' Generates unicode hex value of given data with SHA-256. '''
    return str(unicode(sha256(data).hexdigest()))
</t>
<t tx="zoomq.20120820121523.7432">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

import pprint
pp = pprint.PrettyPrinter(indent=4)

# init all var
CFG = Borg()

@others

if __name__ == '__main__':
    if 4 != len(sys.argv) :
        print '''Usage:
    $ lb4crx2cli.py usr[add|del|mod|chk] 用户名:口令:级别 http://XX.XX.XX
    or
    $ lb4crx2cli.py crx[mod|chk|info] UUID:属性:值 http://XX.XX.XX
        '''
    else:
        mod = sys.argv[1]
        act = sys.argv[2]
        uribase = sys.argv[3]
        #print mod, act, uribase
        #print dir(CFG)
        call2sae(mod, act, uribase)



</t>
<t tx="zoomq.20120820121523.7433">import sys
import time
import base64
import urllib2 as urilib
from hashlib import md5
from base64 import urlsafe_b64encode

from config import CFG
@others


</t>
<t tx="zoomq.20120820121523.7437">def __genRESTargs(usract):
    args = "%s"% usract
    args += "/%s"% CFG.APPKEY       #"appkey=" + 
    args += "/%d"% time.time()      #"&amp;timestamp=" + 
    sign_base_string = "%s/%s"% (CFG.APITYPE, args)
    args += "/%s"% __genRESTsign(sign_base_string)
    #md5(sign_base_string + CFG.SECRET).hexdigest() #"&amp;sign=" + 
    return args</t>
<t tx="zoomq.20120820121523.7438">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind
    APPKEY = "5t4r3e2w1q"
    SECRET = "99fc9fdbc6761f7d898ad25762407373"
    APITYPE = "api/cli"
    PREUID = "usr:"




</t>
<t tx="zoomq.20120820121523.7439">def call2sae(mod, act, uribase):
    todo = mod
    #uname, passwd = act.split(":")
    usract = act
    aimurl = "%s/%s/%s/%s"% (uribase
        , CFG.APITYPE
        , todo
        , __genRESTargs(usract)
        )
    print aimurl
    #print urilib.urlopen(aimurl).read()
    #return
    result = urilib.urlopen(aimurl).read()
    #print eval(result)
    pp.pprint(eval(result))
    </t>
<t tx="zoomq.20120820121523.7442">def __genRESTsign(args):
    sign_base_string = "%s/%s"% (CFG.APITYPE, args)
    return md5(sign_base_string + CFG.SECRET).hexdigest()</t>
<t tx="zoomq.20130918155053.5758">@language py
# -*- coding: utf-8 -*-

</t>
<t tx="zoomq.20130918155053.5760">@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    print request.query.keys()
    print request.query.echostr
    #print request.query_string
    #print dir(BaseRequest.query_string)
    return request.query.echostr
</t>
<t tx="zoomq.20130918155053.7058">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

@others

if __name__ == '__main__':
    if 2 != len(sys.argv) :
        print '''Usage:
            utility.py test
        '''
    else:
        print "hand testing ..."
        #MANIFEST4CRX(open('../../elf.crx', "rb").read())
        #print GENID('sae',"sdfsdfsd")
        #print GENID('crx')
        #print INIobjSYS('cc')
        #print 'increase by KVDB: %s' % INCR4KV()
        #print 'increase by Memcache: %s' % INCR4MM()
    


</t>
<t tx="zoomq.20130918155053.7059">import os
import sys
import shutil

import traceback
from copy import deepcopy
from time import time, gmtime, strftime, localtime
#print os.path
import base64
import marshal
import cPickle
#from base64 import b64encode as bencode
from hashlib import md5
import json as JSON

import pprint
pp = pprint.PrettyPrinter(indent=4)

from config import CFG
# KVDB or Memcache global sys. event count KEY
#_k4incr = CFG.K4D['incr']
# import PyMongo
from pymongo import MongoClient as Connection
from pymongo import errors as ERR
#import gridfs

#import sae.storage
#import sae.kvdb
#KV = sae.kvdb.KVClient()


</t>
<t tx="zoomq.20130918155053.7060">def __popen(cmdline):
    p =  subprocess.Popen(cmdline
        ,shell=True
        ,stdin=subprocess.PIPE
        ,stdout=subprocess.PIPE
        ,stderr=subprocess.PIPE)
    lisERR = p.stderr.readlines()
    strERR = "".join(lisERR)
    lisOUT = p.stdout.readlines()
    strOUT = "".join(lisOUT)
    return lisERR,strERR,lisOUT,strOUT
    #return strERR,lisOUT,strOUT




    
</t>
<t tx="zoomq.20130918155053.7061">def TSTAMP():
    '''通用时间戳生成器:
        yymmddHHMMSS+5位微秒
        e.g.
        12080110561431076
    '''
    date = strftime("%y%m%d%H%M%S", localtime())
    mms = "%.5f"% time()
    ms = mms[-5:]
    return "%s%s"% (date, ms)




</t>
<t tx="zoomq.20130918155053.7062">def INCR4MO():
    '''BASE MongoDB make GLOBAL increaser
    '''
    #print CFG.TOT
    if CFG.TOT.find_one():
        CFG.TOT.update({}, {"$inc": {"TOT": 1}})
    else:
        CFG.TOT.insert({"TOT":0})
        CFG.TOT.update({}, {"$inc": {"TOT": 1}})
    #t = CFG.TOT.find_one()
    #print t['TOT']
    return CFG.TOT.find_one()['TOT']




</t>
<t tx="zoomq.20130918155053.7063">def GENID(obj,name=""):
    '''通用ID生成器:
        x+yymmddHHMMSS+5位微秒+对象鍵3位+全局序号 (名称 md5[:5] .%(dname)s)
        e.g.
        x12080110561431076CRX1111
    '''
    timestamp = TSTAMP()
    tot = INCR4MO()
    #dname = ""#md5.new(name).hexdigest()[:5]
    GOBJMAP = {'his':'h%(timestamp)sHIS%(tot)d'
        ,'crx':'x%(timestamp)sCRX%(tot)d'
        ,'tag':'t%(timestamp)sTAG%(tot)d'
        ,'author':'a%(timestamp)sUSR%(tot)d'
        ,'sess':'s%(timestamp)sSESS%(tot)d'
        ,'comment':'c%(timestamp)sCOMM%(tot)d'
        ,'grp':'g%(timestamp)sGRP%(tot)d'
        ,'pic':'p%(timestamp)sSAE%(tot)d'
        }
    if obj in GOBJMAP.keys():
        return GOBJMAP[obj]% locals()
    else:
        print "UUID's templet is non-exist!!!"
        return None




</t>
<t tx="zoomq.20130918155053.7064">def CHK4MANIFEST(t_manifest):
    '''base json.loads() test manifest.json is good?
    '''
    try:
        js_manifest = JSON.loads(t_manifest)
        #pp.pprint(js_manifest['theme']['images'])
    except ValueError:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        print "&gt;&gt;&gt;JSON err. \n\t", traceback.print_exc()
        return template('ERROR.html'
            , err_code = "JSON ERROR!"
            , err_mess = "\n".join(traceback.format_exc().splitlines())
            )

</t>
<t tx="zoomq.20130918155053.7065">def HEX2RGB(hexColor):
    """Convert a hex color string (e.g. "#05ff66") 
        into an rgb triplet 5 ranging from 0:255 
    """ 
    if hexColor[0] == '#': hexColor = hexColor[1:] 
    elif hexColor[0:2].lower() == '0x':  hexColor = hexColor[2:] 
    if len(hexColor)==3: hexColor = hexColor[0]+'0'+hexColor[1]+'0'+hexColor[2]+'0' 
    return int(hexColor[0:2], 16), int(hexColor[2:4], 16), int(hexColor[4:6], 16) 

</t>
<t tx="zoomq.20130918155053.7066">def FIX_MANIFEST(json, node, key, val):
    '''fix manifest node val
    
    node -- which node is begain, ('theme','images')
    '''
    #print node,len(node)
    if 2 ==  len(node):
        #print "deep nodes"
        crt_nodes = json[node[0]][node[1]]
        #pp.pprint(crt_nodes)
        crt_nodes[key] = val
    else:
        #print "root nodes" 
        crt_nodes = json.keys()
        json[key] = val
    return json






</t>
<t tx="zoomq.20130918155053.7067">def LOAD4JSON(p2json):
    #print p2json
    smjson = open(p2json,"r").read()
    #print smjson
    ojson = eval(smjson)
    crt_manifest = JSON.loads(JSON.dumps(ojson))
    return crt_manifest
    
</t>
<t tx="zoomq.20130918155053.7068">def LOAD2JSON(jsonstr):
    #print p2json
    smjson = jsonstr    # open(p2json,"r").read()
    #print smjson
    ojson = eval(smjson)
    crt_manifest = JSON.loads(JSON.dumps(ojson))
    return crt_manifest
    
</t>
<t tx="zoomq.20130918155053.7069">def _genArgsStr(api_path, args):
    key_values = ["%s=%s"% (arg[0], arg[1]) for arg in args]
    base_string = api_path + "/" + "&amp;".join(key_values)
    return base_string

</t>
<t tx="zoomq.20130918155053.7070">def _genQueryArgs(api_matter, q="", rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    matter = "%s/%s"% (CFG.APIPRE, api_matter)
    #print "matter", matter
    args = []
    args.append(("appkey", CFG.APPKEY ))
    args.append(("ts", "%.3f" % (time()) ))
    if rest_method in ['GET', 'DELETE']:
        #print rest_method
        sign_base_string = _genArgsStr(matter, args)
        args.append(("sign", md5(sign_base_string + CFG.SECRET).hexdigest()))
        #print args, "\n", sign_base_string
    else:
        # POST PUT
        if not q:
            print "缺少 set=*** 设定值"
            return None
        #print q
        q_args = q.split("=")
        args.append((q_args[0], base64.urlsafe_b64encode(q_args[1])))
        sign_base_string = _genArgsStr(matter, args)
        args.append(("sign", md5(sign_base_string + CFG.SECRET).hexdigest()))
        #print args, "\n", sign_base_string
    return args

</t>
<t tx="zoomq.20130918155053.7071">def _chkQueryArgs(api_matter, q, rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    matter = api_matter #"%s/%s"% (CFG.APIPRE, api_matter)
    #print "matter", matter
    args = []
    args.append(("appkey", q['appkey'] ))
    args.append(("ts", q['ts'] ))
    #args.append(("sign", q['sign'] ))
    if rest_method in ['GET', 'DELETE']:
        re_sign = md5(_genArgsStr(matter, args) + CFG.SECRET).hexdigest()
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
        #print chk_time&amp;chk_sign
        #print api_matter, q
    else:
        # POST PUT
        for k in q.keys():
            if k not in ['appkey', 'ts', 'sign']:
                args.append((k, q[k] ))
        re_sign = md5(_genArgsStr(matter, args) + CFG.SECRET).hexdigest()
        #print "getsign\t", q['sign']
        #print "re_sign\t", re_sign
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
        #print api_matter, q
    return chk_time&amp;chk_sign
    #return "debug"
</t>
<t tx="zoomq.20130918155053.7072">def _query2dict(qstr):
    q_dict = {}
    for q in base64.urlsafe_b64decode(qstr).split("&amp;"):
        item = q.split("=")
        q_dict[item[0]] = item[1]
    return q_dict
</t>
<t tx="zoomq.20130918155053.7073">def HISIT(collectioname, uuid, actype, usrid="lbTCLI"):
    '''通用操作历史填写器:
        - 对 hstoric 进行标准写入
        - 记录被操作节点的 uuid/数据dump
    '''
    collect = CFG.TCDB[collectioname]
    #print collect
    obj = collect.find_one({'uuid': uuid})
    #print type(obj)
    dump = cPickle.dumps(obj)
    #print type(dump)
    #print cPickle.loads(dump)
    his_id = GENID('his')
    MONGO_NODE = {'uuid': his_id
        , 'hisobj':uuid
        , 'usrid':usrid
        ,'actype':actype
        ,'dump': dump
        }
    #return None
    CFG.HIS.insert(MONGO_NODE)
    return his_id


</t>
<t tx="zoomq.20130918155053.7074">def EXP2PNG(data, path, png):
    dataimg =  data.split(',')[1]
    open('%s/%s'% (path, png)
            ,'wb').write(base64.b64decode(dataimg)
        )
</t>
<t tx="zoomq.20130918155053.7075">def EXP4IMG(data, path, fname):
    '''chk base form img data, and:
        + write into path as img file
        + return error,ex
    '''
    #print CFG.ALLOWED_EXTENSIONS
    img_code = data.split(',')
    img_ext = img_code[0].split(";")[0].split("/")[1]
    if img_ext in CFG.ALLOWED_EXTENSIONS:
        #print img_ext, "\n\tdata.split(',')[0]"
        img_data = img_code[1]
        #print "img_data\t", len(img_data)
        exp_file = '%s/%s.%s'% (path, fname, img_ext)
        #print exp_file
        #return None
        open('%s/%s.%s'% (path, fname, img_ext)
                ,'wb').write(base64.b64decode(img_data)
            )
        return (True, img_ext)
    else:
        return (False, None)
</t>
<t tx="zoomq.20130918155053.7076">def COLOR2CHK(ttype, item, color, save_path, part=0):
    '''base part matter, gen the right pre. gen. colored img.
        - part=='' just self colored
        - part!='' just gen. offsets collored img.
        - return (item_name, colored img. name)
    '''
    offsets = ["left", "center", "right"]
    #print ttype, item, color, save_path
    jfix = {}
    if 0 == part:
        # just colored self
        res_path = "%s/%s/%s"% (ttype, item, color)
        aim_img = "%s-%s.png"% (item, color)
        __USE4COLOR(res_path, aim_img, save_path)
        jfix[item] = aim_img
        # pre ttype/item/color
        # aim itme[_part]-color
    else:
        for point in offsets:
            crt_item = "%s_%s"% (item, point)
            res_path = "%s/%s/%s"% (ttype, crt_item, color)
            aim_img = "%s_%s-%s.png"% (item, point, color)
            __USE4COLOR(res_path, aim_img, save_path)
            jfix[crt_item] = aim_img
    return jfix


</t>
<t tx="zoomq.20130918155053.7077">def __USE4COLOR(res_path, aim_img, save_path):
    #print res_path, aim_img, save_path
    scr_pre_img =  "%s/%s.png"% (CFG._PREGRN_PATH
        , res_path
        )
    #print "scr_pre_img\t", scr_pre_img
    aim_tab_img = "%s/%s"% (save_path, aim_img)
    #print "aim_tab_img\t", aim_tab_img
    #return None
    try:
        shutil.copy(scr_pre_img, aim_tab_img)
    except:
        #print "*** print_exc:"
        traceback.print_exc()
    #return aim_img


</t>
<t tx="zoomq.20130918155053.7083">@APP.post('/echo')
@APP.post('/echo/')
def wechat_post():
    #print request.forms.keys()[0]
    xml = etree.XML(request.forms.keys()[0])
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    sha1_name = hashlib.sha1(toUser).hexdigest()
    pre_uuid = "u:%s"% sha1_name
    __MsgType = xml.findtext("MsgType")
    Content = xml.findtext("Content") #.encode('utf8')
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;
        
    







</t>
<t tx="zoomq.20130918155053.7084">&lt;&lt;XML模板&gt;&gt;
&lt;&lt;ALIAS&gt;&gt;

TXT_WELCOME='''GDG珠海 公众号的应答范畴:
- GDG活动报名、签到、直播
- GDG大妈联系查询
- GDG发表文章查阅
功能正在完善中，欢迎反馈。
更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_HELP='''GDG珠海 公众号目前支持以下命令:
h   ~ 打印本帮助
V   ~ 查看系统版本
s   ~ 查阅过往文章
i   ~ 查看自己的资料
e   ~ 查看将要举行的活动
re  ~ 报名参加活动
ir  ~ 查看自己已经报名的活动
dm [组委的名字] 可了解TA更多
'''

TXT_NEW_USR='''还未注册 亲 的信息,请输入邮箱先;
形如:
em:foo.bar@gmail.com

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PLS_EM='''请输入你的邮箱!形如:
em:foo.bar@gmail.com

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_CRT_EM='''亲! 当前的邮箱是:
%s

更多细节,请惯性地输入 h 继续吧 :)
'''


'''
2013/09/23 12:13:56] -  &lt;xml&gt;
     &lt;ToUserName&gt;&lt;![CDATA[oFNShjiOhclfJ-CtOO81p2sPrBfs]]&gt;&lt;/ToUserName&gt;
     &lt;FromUserName&gt;&lt;![CDATA[gh_5e32c47b5b23]]&gt;&lt;/FromUserName&gt;
     &lt;CreateTime&gt;13092312135634476&lt;/CreateTime&gt;
     &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
     &lt;Content&gt;&lt;![CDATA[本公众号的自动回答范畴：
    - GDG活动报名、签到、直播
    - GDG大妈联系查询
    - GDG发表文章查阅
    功能正在完善中，欢迎反馈。
    更多请惯性地输入 h 继续吧 :)
    ]]&gt;&lt;/Content&gt;
     &lt;/xml&gt; yq34 
'''
</t>
<t tx="zoomq.20130918155053.8973">@language python
@tabwidth -4


</t>
<t tx="zoomq.20130923093950.3647">import sae.kvdb
KV = sae.kvdb.KVClient()

#KVDB 对象模板
KEY4_incr = 'gincr'
TOT = KV.get(KEY4_incr)    # 全局自增序号
if None == TOT:
    KV.add(KEY4_incr, 0)
else:
    print "TOT", KV.get(KEY4_incr)

&lt;&lt;MEMBER&gt;&gt;

&lt;&lt;大妈们&gt;&gt;

&lt;&lt;CONTENT&gt;&gt;

&lt;&lt;HISTORIC&gt;&gt;


</t>
<t tx="zoomq.20130923093950.5395">ESSAY_TAG = {'ot':"其它"
    , 'gb':"G术图书 (推荐好书,书无中外)"
    , 'dd':"D码点评 (麻辣评点,善意满盈)"
    , 'gt':"G说公论 (时评杂文,新旧不拘)"
    , 'hd':"海选文章 (得要相信,大妈法眼)"
    }
    
# 文章索引
K4DM = {"his_id":""   # 更新戮
    , "del":0
    , "tag":"ot"
    , 'tiele':''
    , "desc":""     # 解释
    , "picurl":''
    , "url":""
    }
    


</t>
<t tx="zoomq.20130923093950.5396">#   历史操作 键-名字典
K4H = {'C':"Create"
    ,'D':"Delete"
    ,'U':"Update"
    }
#'uuid':""     # 历史版本扩展ID
objHis = {'hisobj':""
    ,'actype':"..."     # 操作类型C|D|U~ Create|Delet|Update = 创建|删除|更新
    ,'dump':''        # 数据集
    }


</t>
<t tx="zoomq.20130923093950.5397">objUSR={"his_id":""   # 更新戮
    , "del":0
    , "fsm":""      # 有限状态机 当前状态
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    , "lasttm": ''  #"2013-07-05 19:01:33",
    }
    


</t>
<t tx="zoomq.20130923093950.7285">TPL_TEXT=''' &lt;xml&gt;
 &lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
 &lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
 &lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
 &lt;Content&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Content&gt;
 &lt;/xml&gt;'''

TPL_URIS='''&lt;xml&gt;
 &lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
 &lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
 &lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
 &lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;
 &lt;ArticleCount&gt;%(item_count)d&lt;/ArticleCount&gt;
 &lt;Articles&gt;
 %(items)s
 &lt;/Articles&gt;
 &lt;/xml&gt; 
'''

TPL_ITEM='''&lt;item&gt;
 &lt;Title&gt;&lt;![CDATA[%(title)s]]&gt;&lt;/Title&gt; 
 &lt;Description&gt;&lt;![CDATA[%(description)s]]&gt;&lt;/Description&gt;
 &lt;PicUrl&gt;&lt;![CDATA[%(picurl)s]]&gt;&lt;/PicUrl&gt;
 &lt;Url&gt;&lt;![CDATA[%(url)s]]&gt;&lt;/Url&gt;
 &lt;/item&gt;
'''
</t>
<t tx="zoomq.20130923093950.8563">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130923093950.8564">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130923093950.8565">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130923093950.8566">pass
#return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130923093950.8567">usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
print usrs
print "CFG.TOT ", CFG.TOT
if 0 == len(usrs):
    # 1st ping
    print "sha1_name: ", sha1_name
    uuid = GENID('usr', name = sha1_name)
    new_usr = deepcopy(CFG.objUSR)
    new_usr['his_id'] = GENID('his')
    new_usr['pp'] = toUser
    new_usr['lasttm'] = time.time()
    print uuid, new_usr
    KV.add(uuid, new_usr)
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    member = usrs[0][1]
    if "" == member['em']:
        return __echo_txt(fromUser, toUser, CFG.TXT_PLS_EM)
    else:
        return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% member['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''
'''
objUSR={"uuid":""            
    , "his_id":""   # 更新戮
    , "del":0
    , "fsm":""      # 有限状态机 当前状态
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    , "lasttm": ''  #"2013-07-05 19:01:33",
    }    
'''


</t>
<t tx="zoomq.20130923093950.8569"># 大妈们的联系方式
K4DM = {"his_id":""   # 更新戮
    , "del":0
    , "desc":""     # 解释
    , "pp":''       # Passport "kswl662773786"
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    }


</t>
<t tx="zoomq.20130923093950.8570">def __echo_txt(fromUsr, toUsr, text):
    tStamp = TSTAMP()
    fromUser = fromUsr
    toUser = toUsr
    content = text
    print CFG.TPL_TEXT% locals()
    return CFG.TPL_TEXT% locals()

</t>
<t tx="zoomq.20130923093950.8816">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
member = usrs[0][1] 
member['em'] = em
KV.replace(usrs[0][0] , member)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130923093950.8817">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130923093950.8818">CMD_ALIAS={"help": ['h', 'H', 'Help', 'help', '?', u'？']
    , "version": ['v', 'V', 'ver', 'Version', 'version', 'Ver']
    , "info": ['i', 'I', 'Info', 'info', 'info.', 'information']
    , "search": ['s', 'S', 'see', 'See', 'search', 'Search', 'seek']
    , "event": ['e', 'E', 'event', 'Event', 'events', 'act']
    , "dm": ['dm', 'DM', 'Dm', 'dd']
    , "sayeahoo": ['syh', 'kvdb', 'stat', 'status']
    }

DM_ALIAS = {"bonnie": ['Bonnie', 'lxc', 'LXC', u'刘星辰']
    , "zoomquiet": ['zq', 'zoomq', 'ZQ', u'ZQ大妈', u'大妈', u'周琦']
    , "spawnris": ['Spawnris', u'老高', u'高骏腾']
    , "langqixu": ['lqx', 'LQX', u'小郎', u'郎启旭']
    }
</t>
</tnodes>
</leo_file>
