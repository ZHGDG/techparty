<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_stylesheet?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20120710140424.5446" a="E"><vh>4SAE</vh>
<v t="zoomq.20120710140424.5447"><vh>@nosent README.md</vh></v>
<v t="zoomq.20120710140424.5454"><vh>@nosent config.yaml</vh></v>
<v t="zoomq.20120710140424.5455"><vh>@nosent index.wsgi</vh></v>
<v t="zoomq.20120723102156.5544" a="E"><vh>@nosent config.py</vh>
<v t="zoomq.20120727213305.14750"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120710140424.5456" a="E"><vh>&lt;&lt;cfg4Borg&gt;&gt;</vh>
<v t="zoomq.20130923093950.3647"><vh>KVDB</vh>
<v t="zoomq.20130923093950.5397"><vh>&lt;&lt;MEMBER&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5395"><vh>&lt;&lt;CONTENT&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8569"><vh>&lt;&lt;大妈们&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5396"><vh>&lt;&lt;HISTORIC&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130918155053.7084" a="E"><vh>4wechat</vh>
<v t="zoomq.20130923093950.8818"><vh>&lt;&lt;ALIAS&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.7285"><vh>&lt;&lt;XML模板&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6457"><vh>活动报名</vh></v>
<v t="zoomq.20130925103854.6455"><vh>礼节/帮助</vh></v>
<v t="zoomq.20130925103854.6456"><vh>用户信息</vh></v>
<v t="zoomq.20130925103854.6458"><vh>文章查询</vh></v>
</v>
<v t="zoomq.20130925103854.4951"><vh>RESTful</vh></v>
</v>
</v>
<v t="zoomq.20130925103854.4957"><vh>@nosent CLI.py</vh>
<v t="zoomq.20130925103854.4958"><vh>&lt;&lt;docopt&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.4959"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.4960" a="E"><vh>_rest_main()</vh>
<v t="zoomq.20130925103854.6450"><vh>&lt;&lt;echo matters&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6452"><vh>&lt;&lt;GET DEL&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6451"><vh>&lt;&lt;POST PUT&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.4961"><vh>smart_rest()</vh></v>
</v>
<v t="zoomq.20120723102156.5541"><vh>module</vh>
<v t="zoomq.20130925103854.6406"><vh>@nosent __init__.py</vh></v>
<v t="zoomq.20120820121523.7422"><vh>@nosent auth.py</vh>
<v t="zoomq.20120820121523.7423"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120820121523.7426"><vh>sha256_uhex</vh></v>
<v t="zoomq.20120820121523.7424"><vh>check_login</vh></v>
<v t="zoomq.20120820121523.7425"><vh>auth_required</vh></v>
<v t="zoomq.20130925103854.6447"><vh>_genArgsStr</vh></v>
<v t="zoomq.20130925103854.6449"><vh>_genQueryArgs</vh></v>
<v t="zoomq.20130925103854.6443"><vh>_query2dict</vh></v>
<v t="zoomq.20130925103854.6445"><vh>_chkQueryArgs</vh></v>
</v>
<v t="zoomq.20120717112543.5481"><vh>@nosent utility.py</vh>
<v t="zoomq.20120727213305.14698"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120802192540.8726"><vh>PUTHIS()</vh></v>
<v t="zoomq.20120727213305.14756"><vh>INIobjSYS()</vh></v>
<v t="zoomq.20120804110957.4144"><vh>POP4KV()</vh></v>
<v t="zoomq.20120802192540.8728"><vh>INS2KV()</vh></v>
<v t="zoomq.20120804110957.4485"><vh>POP4LIST()</vh></v>
<v t="zoomq.20120802192540.5463"><vh>IDX4LIST()</vh></v>
<v t="zoomq.20120805183037.4187"><vh>INS2LIST()</vh></v>
<v t="zoomq.20130925103854.6439"><vh>ADD4SYS()</vh></v>
<v t="zoomq.20120805183037.5896"><vh>INS2DICT4LIST()</vh></v>
<v t="zoomq.20120802192540.7100"><vh>TSTAMP()</vh></v>
<v t="zoomq.20120802192540.5468"><vh>GENID()</vh></v>
<v t="zoomq.20130925103854.6429"><vh>USRID()</vh></v>
<v t="zoomq.20130925103854.6463"><vh>DAMAID()</vh></v>
<v t="zoomq.20120727213305.14699"><vh>INCR4KV()</vh></v>
<v t="zoomq.20120727213305.14701"><vh>INCR4MM()</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5543" a="E"><vh>web</vh>
<v t="zoomq.20120723102156.5545"><vh>@nosent __init__.py</vh>
<v t="zoomq.20120723102156.5546"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120723102156.5548"><vh>/</vh></v>
<v t="zoomq.20120727213305.14707"><vh>404+各种默认处理</vh></v>
</v>
<v t="zoomq.20120723102156.5561" a="E"><vh>@nosent mana4api.py</vh>
<v t="zoomq.20120723102156.5562"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20130918155053.5760"><vh>GET  /echo</vh></v>
<v t="zoomq.20130918155053.7083"><vh>POST /echo</vh>
<v t="zoomq.20130923093950.8817"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8816"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8567"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8563"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8564"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8565"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8566"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.6430" a="E"><vh>FSM</vh>
<v t="zoomq.20130925103854.6461"><vh>&lt;&lt;大妈联系&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6460"><vh>dm 大妈联系</vh></v>
<v t="zoomq.20130925103854.6433"><vh>i 成员信息</vh></v>
<v t="zoomq.20130925103854.6437"><vh>e 活动查询</vh></v>
<v t="zoomq.20130925103854.6435"><vh>活动报名</vh></v>
<v t="zoomq.20130925103854.6441"><vh>系统信息</vh></v>
<v t="zoomq.20130925103854.6431"><vh>s 查阅文章</vh></v>
</v>
<v t="zoomq.20130925103854.6426"><vh>__chkRegUsr()</vh></v>
<v t="zoomq.20130925103854.6427"><vh>__update_usr()</vh></v>
<v t="zoomq.20130923093950.8570"><vh>__echo_txt()</vh></v>
<v t="zoomq.20130925103854.5007"><vh>cli/ 工具</vh>
<v t="zoomq.20130925103854.5049"><vh>GET cli/st/kv</vh></v>
<v t="zoomq.20130925103854.5041" a="E"><vh>用户管理</vh>
<v t="zoomq.20130925103854.6454"><vh>GET cli/sum/usr</vh></v>
<v t="zoomq.20130925103854.5042"><vh>PUT cli/acl/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20130925103854.5043"><vh>&lt;&lt;acl bind&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.5044"><vh>PUT cli/reliv/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20130925103854.5045"><vh>&lt;&lt;reliv del&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.5046"><vh>DEL cli/del/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20130925103854.5047"><vh>&lt;&lt;usr del&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.5048"><vh>GET cli/info/usr/&lt;uuid&gt;</vh></v>
<v t="zoomq.20130925103854.5050"><vh>GET cli/list/usr/级别</vh></v>
<v t="zoomq.20130925103854.5051"><vh>GET cli/find/usr/&lt;关键字&gt;</vh></v>
</v>
<v t="zoomq.20130925103854.5033"><vh>his事务</vh>
<v t="zoomq.20130925103854.5034"><vh>GET sum/his</vh></v>
<v t="zoomq.20130925103854.5035"><vh>GET his/last</vh></v>
</v>
</v>
<v t="zoomq.20120727213305.13050"><vh>/api/sysincr</vh></v>
<v t="zoomq.20120727213305.14707"></v>
</v>
</v>
<v t="zoomq.20120727213305.14715"><vh>templates</vh>
<v t="zoomq.20120812115324.4334"><vh>&lt;&lt;sspathdefine&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14728"><vh>BASE组件</vh>
<v t="zoomq.20120710140424.5449"><vh>@nosent base.html</vh>
<v t="zoomq.20120812115324.4334"></v>
<v t="zoomq.20120710140424.5453"><vh>CSS</vh>
<v t="zoomq.20120804110957.4149"><vh>esp. 警告...</vh></v>
<v t="zoomq.20120804110957.4148"><vh>表单相关</vh></v>
<v t="zoomq.20120804110957.4147"><vh>textarea+select</vh></v>
<v t="zoomq.20120727213305.14772"><vh>button</vh></v>
<v t="zoomq.20120727213305.14773"><vh>a as button</vh></v>
<v t="zoomq.20120727213305.14781"><vh>a as btn in &lt;sub&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.14749"><vh>validatious.1.0.5.min.css</vh></v>
</v>
<v t="zoomq.20120727213305.14737"><vh>@nosent manav.html</vh></v>
<v t="zoomq.20120727213305.14705"><vh>@nosent 404.html</vh></v>
</v>
<v t="zoomq.20120727213305.14717"><vh>@nosent index.html</vh></v>
</v>
<v t="zoomq.20120717112543.5493"><vh>__chaos</vh>
<v t="zoomq.20120727213305.14743"><vh>&lt;&lt;validate&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14734"><vh>表单JS验证</vh></v>
<v t="zoomq.20120727213305.14730"><vh>用户crx升级</vh>
<v t="zoomq.20120727213305.14723"><vh>crxup.html</vh></v>
</v>
<v t="zoomq.20130925103854.6418"><vh>POST /echo</vh>
<v t="zoomq.20130925103854.6419"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6420"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6421"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6422"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6423"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6424"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6425"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5539"><vh>3party</vh>
<v t="zoomq.20130918155053.8973"><vh>@nosent __init__.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20120710140424.5446">creat API+admin srv for lb-crx publish mana.</t>
<t tx="zoomq.20120710140424.5447">@language markdown
# 珠海GDG 微信综合管理服务
~ base 珠三角技术沙龙活动综合管理应用

## 主要开发人员：
- jeff @jeff_kit

## 主要功能

- 查询过往活动
- 报名参加指定活动
- 查询历史报名情况
- 查询社区关键信息
- 自动发送提醒邮件

## Change logging

- 130806 frok from gztechparty/techparty

</t>
<t tx="zoomq.20120710140424.5449">@language html
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN"&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" &gt;

&lt;&lt;sspathdefine&gt;&gt;

  &lt;title&gt;
{% block title4act %}
{% endblock%}- weknow v13.09.18.2&lt;/title&gt;

{% block headJS %}
{% endblock%}

    &lt;style type="text/css"&gt;
@others
    &lt;/style&gt;
&lt;/head&gt;

{% block body %}
&lt;body&gt;
{% endblock%}

&lt;div id="mainbody"&gt;
    {% block mainbody %}
    {% endblock%}
&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;hr/&gt;
    &lt;/div&gt;
&lt;div id="footbar"&gt;
    {% block footernav %}
    {% endblock%}
    |&lt;a href="http://crxdoczh.readthedocs.org/en/latest/5-more/lb4crx/index.html"&gt;帮助&lt;/a&gt;

    &lt;div id="poweredby"&gt;
    &lt;b&gt;powered by:&lt;/b&gt;
        &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;
        ,&lt;a href="http://bottle.paws.de/"&gt;Bottle&lt;/a&gt;
        ,&lt;a href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;
        ,&lt;a href="http://sae.sina.com.cn"&gt;SAE&lt;/a&gt;
        ,&lt;a href="http://www.catb.org/hacker-emblem/"&gt;Hacker&lt;/a&gt;
     &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

{% block footerJS %}
{% endblock%}
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20120710140424.5453">@language css
body{overflow-x:hidden}
body,img,a,div,span,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,textarea,th,td,tr,input{
    margin:0;padding:0
}
body { 
    background: #fefefe; color: #343434; 
    margin: 1em; padding: 0; font-size:105%;
}
h1,h2,h3,h4,h5,h6{
    margin:20px 0 10px 0;
    border-radius:5px;
    padding-left: 15px;
}
h1{
    background: #EBFAFF;
}
h2{
    background: #D1F4FF;
}
h3{
    background: #B8EEFF;
}
h4{
    background: #9EE8FF;
}

input,pre,body,button,select,textarea{
    font:14px/28px Segoe UI,Tahoma,Verdana,Arial,Helvetica,sans-serif
}


img { border: none }
hr {
  width : 100%;
  height : 2px;
  background : #efefef;
  border : 1px solid #ddd;
  clear : both;
}
div#poweredby{
  float : right;
}

a {color:#333;}
a:hover {color:blue;}

del {font-size:95%; color:#555;}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .btnw */
span.right{
    float:right;
}
.btnw{
    border:1px solid #ccc;
    height:42px;
    display:inline-block;
}
.btn::-moz-focus-inner{border:0}


@others



@-moz-document domain(){
    .btnw button{padding:0 27px 0 27px}
    }








</t>
<t tx="zoomq.20120710140424.5454">@language yaml
---
name: weknow
version: 3

</t>
<t tx="zoomq.20120710140424.5455">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)

'''
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)


from bottle import *
import sae

APP = Bottle()
application = sae.create_wsgi_app(APP)

@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    print request.query.keys()
    print request.query.echostr
    return request.query.echostr

'''
</t>
<t tx="zoomq.20120710140424.5456">#管理员邮箱列表
ADMIN_EMAIL_LIST = ['zoomquiet+gdg@gmail.com']

@others

</t>
<t tx="zoomq.20120717112543.5481">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG
#from xsettings import XCFG
#_k4incr = CFG.TOT
KV = CFG.KV #sae.kvdb.KVClient()

@others

if __name__ == '__main__':
    if 2 != len(sys.argv) :
        print '''Usage:
            utility.py test
        '''
    else:
        print "hand testing ..."

</t>
<t tx="zoomq.20120717112543.5493">    '''
    #return "You missed a field."
    #"Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
    #return "You missed a field."
    #return template('upcrx.tpl')

    #return
    
    #print dir(data.file)
    #print type(data.file)
    # GET某个domain下的object
    #ob = s.get('crx4lb', data.filename)
    #print dir(ob)
    #print "\ttype(ob)", type(ob)
    #sdata = ob.data
    #print sdata
    #AppID = crx_id.GetCRXAppID4upload(data.file)
    #AppID = crx_id.GetCRXAppID4upload(sdata)
    #print 'AppID: %s' % AppID
    #data.file.seek(0)
    #print "data.file.closed", data.file.closed
    #print len(raw)
    raw = ""
    if name and data.file:
        while True:
            datachunk = data.file.read(1024)
            if not datachunk:
                break
            raw = raw + datachunk

        filename = data.filename

    try:
        buf = data.file.read(data.bufsize)
        while True:
            buf = data.file.read(data.bufsize)
            if not buf:
                break
            print data.bufsize
        #outfile.close()
        #return 'Uploaded %s !' % upfile.filename        
    except Exception,e:
        print e.message
        return 'Failed in uploading %s !' % data.filename

    @route('/upload', method='POST')
def do_upload():
    try:
        filename = request.POST.get('Filename')
        root, ext = os.path.splitext(filename)
        assert ext[1:].lower() in ALLOWED_TYPE, "Invalid file type: " + ext
        if not os.path.isdir(UPLOAD_BASE):
            os.makedirs(UPLOAD_BASE)
        filedata = request.POST.get('Filedata')
        assert filedata is not None, "Invalid Upload data."
        with open(os.path.join(UPLOAD_BASE, filename), 'wb') as f:
            shutil.copyfileobj(filedata.file, f, 8192)
    except AssertionError, e:
        abort(403, str(e))
    else:
        return filename

    '''
</t>
<t tx="zoomq.20120723102156.5539">@path 3party</t>
<t tx="zoomq.20120723102156.5541">@path module</t>
<t tx="zoomq.20120723102156.5543">@path web


- passwdaccess: if(path ~ "/up") passwd "up:up"
- passwdaccess: if(path ~ "/mana") passwd "mana:mana"

</t>
<t tx="zoomq.20120723102156.5544">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 全局值
class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind
    
    VERSION = "weknow v13.09.18"
    &lt;&lt;cfg4Borg&gt;&gt;
    
CFG = Borg()

</t>
<t tx="zoomq.20120723102156.5545">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

APP = Bottle()

#APP.mount('/up', __import__('mana4up').APP)
APP.mount('/api', __import__('mana4api').APP)
#APP.mount('/mana', __import__('mana4sys').APP)

@others

if __name__ == '__main__':
    debug(True)
    #0.0.0.0
    run(app, host="0.0.0.0",reloader=True)
</t>
<t tx="zoomq.20120723102156.5546">import sys   
#sys.path.append("..")  

from bottle import *
from bottle import __version__ as bottleVer
from bottle import jinja2_template as template
from config import JINJA2TPL_PATH
TEMPLATE_PATH.insert(0, JINJA2TPL_PATH)



</t>
<t tx="zoomq.20120723102156.5548">@APP.route('/')
#@view('404.html')
def index():
    return template('index.html')

</t>
<t tx="zoomq.20120723102156.5561">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
#print sys.path
from config import CFG
from xsettings import XCFG
KV = CFG.KV #sae.kvdb.KVClient(debug=1)
#SG = sae.storage.Client()
debug(True)

APP = Bottle()

@others






</t>
<t tx="zoomq.20120723102156.5562">import sys   
#sys.path.append("..")  
import time
from datetime import datetime
import traceback
import hashlib
from copy import deepcopy
import xml.etree.ElementTree as etree

#import sae
#import sae.storage
#import sae.kvdb
import pyfsm
from pyfsm import state, transition

#from wechat.official import WxNewsResponse
#from wechat.official import WxTextResponse

from bottle import *
from bottle import __version__ as bottleVer
from bottle import jinja2_template as template

from auth import _query2dict, _chkQueryArgs
#from lb4crx2cli import __genRESTsign

from utility import INCR4KV as __incr
from utility import TSTAMP, GENID, USRID
from utility import ADD4SYS


</t>
<t tx="zoomq.20120727213305.13050">@APP.route('/sysincr')
#@APP.route('/&lt;ddd&gt;/sysincr')
def sysincr():
    from utility import INCR4KV as __incr
    #kv = sae.kvdb.KVClient()
    #print  kv.get_info()
    return str(__incr())
    
    '''
    kv = sae.kvdb.KVClient()
    print dir(kv)
    print kv.get_info()
    print kv.get("TOT")
    
    if not kv.get("TOT"):
        kv.add("TOT", 1)
    print kv.get("TOT")
    print type(kv.get("TOT")+1)
    
    kv.replace("TOT",kv.get("TOT")+1)
    print kv.get("TOT")
    
    return str(kv.get("TOT"))
    '''



</t>
<t tx="zoomq.20120727213305.14698">import os
import sys
import traceback
from copy import deepcopy
from time import time, gmtime, strftime, localtime
import hashlib





</t>
<t tx="zoomq.20120727213305.14699">def INCR4KV():
    '''BASE KVDB make GLOBAL increaser
    '''
    #print CFG.KEY4_incr
    #print None == CFG.KV.get(CFG.KEY4_incr)
    if None == KV.get(CFG.K4D['incr']):
        #print "\t EMPTY?!"
        KV.add(CFG.K4D['incr'], 0)
    else:
        #print "\t incr. BASE HISTORIC"
        KV.set(CFG.K4D['incr'], KV.get(CFG.K4D['incr'])+1)
    return KV.get(CFG.K4D['incr'])





</t>
<t tx="zoomq.20120727213305.14701">def INCR4MM():
    '''BASE Memcache make GLOBAL increaser
    '''
    import pylibmc
    
    mc = pylibmc.Client()
    if not mc.get(_k4incr):
        mc.set(_k4incr, 1111)
    else:
        mc.incr(_k4incr)
    return mc.get(_k4incr)



</t>
<t tx="zoomq.20120727213305.14705">@language html
{% extends "base.html" %}

{% block title4act %}
404
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat:404(Bottle版) &lt;/h1&gt;

&lt;h2&gt;真心没作呢,介事儿&lt;/h2&gt;

吼这位:-(
&lt;pre&gt;
zoomquiet+lb4crx2srv # gmail.com
&lt;/pre&gt;
{% endblock %}

{% block footernav %}
:-[
{% endblock %}



</t>
<t tx="zoomq.20120727213305.14707">#@view('404.html')
@APP.error(404)
def error404(error):
    return template('404.html')

@APP.route('/favicon.ico')
def favicon():
    abort(204)
    
@APP.route('/static/&lt;filename&gt;')
def server_static(filename):
    return static_file(filename, root='static')
    </t>
<t tx="zoomq.20120727213305.14715">@path templates

#for local debug:
{% set sspath4pic = "http://localhost:8080/stor-stub/pic2lb" %}
{% set sspath4crx = "http://localhost:8080/stor-stub/crx4lb" %}

#for SAE debug:
{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}

{% set sspage2crx = "http://lb4crx-page4crx.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120727213305.14717">@language html
{% extends "base.html" %}

{% block title4act %}
index
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat 响应后台(Bottle版) =&lt;/h1&gt;

是也乎;-)


{% endblock %}

{% block footernav %}
:-}
{% endblock %}


</t>
<t tx="zoomq.20120727213305.14723">@language html
{% extends "base.html" %}

{% block title4act %}
up
    {% endblock %}

{% block headJS %}
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}

{% block mainbody %}
&lt;h2&gt;猎豹国产原创扩展:上传&lt;/h2&gt;

&lt;form action="/up/crx" method="post" enctype="multipart/form-data" class="validate"&gt;
  名称:&lt;input type="text" name="name" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;
  文件:&lt;input type="file" name="data" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;

&lt;span id="reply_submit" class="btnw"&gt;
    &lt;button type="submit" class="action"&gt;就酱&lt;/button&gt;
&lt;/span&gt;

&lt;/form&gt;
    {% endblock %}

{% block footernav %}
:-]
    {% endblock %}

</t>
<t tx="zoomq.20120727213305.14728">基础模板组
</t>
<t tx="zoomq.20120727213305.14730"></t>
<t tx="zoomq.20120727213305.14734">
{% block headJS %}
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}
</t>
<t tx="zoomq.20120727213305.14737">@language html
导航:&lt;a href="/"&gt;首页&lt;/a&gt;
|&lt;a href="/mana"&gt;管理&lt;/a&gt;
|&lt;a href="/api"&gt;接口&lt;/a&gt;


</t>
<t tx="zoomq.20120727213305.14743">@language js
new FormValidator('upcrxform', [{
    name: 'crxname',
    display: 'required',    
    rules: 'required|min_length[4]'
}, {
    name: 'crxfile',
    display: 'required',    
    rules: 'required'
}], function(errors, event) {
    var SELECTOR_ERRORS = $('.error_box'),
        SELECTOR_SUCCESS = $('.success_box');
        
    if (errors.length &gt; 0) {
        SELECTOR_ERRORS.empty();
        
        for (var i = 0, errorLength = errors.length; i &lt; errorLength; i++) {
            SELECTOR_ERRORS.append(errors[i].message + '&lt;br /&gt;');
        }
        
        SELECTOR_SUCCESS.css({ display: 'none' });
        SELECTOR_ERRORS.fadeIn(200);
    } else {
        SELECTOR_ERRORS.css({ display: 'none' });
        SELECTOR_SUCCESS.fadeIn(200);
    }
    
    if (event &amp;&amp; event.preventDefault) {
        event.preventDefault();
    } else if (event) {
        event.returnValue = false;
    }
});

</t>
<t tx="zoomq.20120727213305.14749">@language css

/**
 * TERMS OF USE - Validatious 2.0
 * Open source under the BSD License.
 * Copyright 2008 Christian Johansen.
 * All rights reserved.
 */
.error{color:#900;background:#f8f8f8;}
.error .messages,.error .messages li{list-style:none;}
.error .messages{font-size:1em;padding:.6667em 0 0 1em;}
</t>
<t tx="zoomq.20120727213305.14750">import sys
import os.path
app_root = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(app_root, "3party/"))
sys.path.insert(0, os.path.join(app_root, "module/"))
sys.path.insert(0, os.path.join(app_root, "web/"))
#   指定的模板路径
JINJA2TPL_PATH = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__)
        , "templates/")
    )

#import hashlib</t>
<t tx="zoomq.20120727213305.14756">def INIobjSYS(key):
    '''try and init. all kinds of objSYS K/V
    '''    
    if key not in CFG.K4D.keys():
        return None
    else:
        #print CFG.K4D[key]
        if not KV.get(CFG.K4D[key]):
            KV.add(CFG.K4D[key],[])
        return (CFG.K4D[key], KV.get(CFG.K4D[key]))




</t>
<t tx="zoomq.20120727213305.14772">.btnw button {
    font-size:16px;
    text-align:center;
    overflow:visible;
    height:42px;
    padding:0 28px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw button:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw button:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}

</t>
<t tx="zoomq.20120727213305.14773">.btnw a {
    text-decoration: none;
    font-size:16px;
    text-align:center;
    overflow:visible;
    padding:0 28px;
    height:40px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120727213305.14781">#iterm sub{
    float: right; padding: 0; margin: 5px 0 0 0; 
    border-bottom: 1px dotted #ccc;
    height:22px; line-height:22px; 
    overflow:hidden;
}

#iterm .btnwa{
    display:inline-block;
    border:1px solid #ccc;
    height:22px;
}
#iterm .btnwa a {
    text-decoration: none;
    font-size:12px;
    text-align:center;
    overflow:visible;
    padding:0 18px;
    height:22px;
    line-height:22px;
    vertical-align:text-bottom;

    z-index:1;
    display:inline-block;
    border:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

#iterm .btnwa a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

#iterm .btnwa a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120802192540.5463">def IDX4LIST(idx, KV):
    '''BASE idx list collection all Obj. into List
    '''
    if 0 == len(idx):
        return None
    exp = []
    for i in idx:
        exp.append(KV.get(i))
    if 0 == len(exp):
        return None
    else:
        return exp



</t>
<t tx="zoomq.20120802192540.5468">def GENID(obj, name=""):
    '''通用ID生成器:
        yymmddHHMMSS+5位微秒+对象鍵3位+全局序号
        e.g.
        x:12080110561431076:CRX1111
    '''
    timestamp = TSTAMP()
    tot = INCR4KV()
    #sha1name = hashlib.sha1(name).hexdigest()
    GOBJMAP = {'his':'h:%(timestamp)s:HIS%(tot)d'
        ,'tag':'t:%(timestamp)s:TAG%(tot)d'
        ,'event':'e:%(timestamp)s:EVE%(tot)d'
        #,'dm':'m:%(timestamp)s:DM%(tot)d'
        }
    if obj in GOBJMAP.keys():
        return GOBJMAP[obj]% locals()
    else:
        return None



</t>
<t tx="zoomq.20120802192540.7100">def TSTAMP():
    '''通用时间戳生成器:
        yymmddHHMMSS+5位微秒
        e.g.
        12080110561431076
    '''
    date = strftime("%y%m%d%H%M%S", localtime())
    mms = "%.5f"% time()
    ms = mms[-5:]
    return "%s%s"% (date, ms)




</t>
<t tx="zoomq.20120802192540.8726">def PUTHIS(crobjs, act):
    '''put any obj. into SYS:his
        + copy obj. as new h:id KV
        + return h:id
    '''
    his = deepcopy(CFG.objHis)
    hid = GENID('his')
    his['id'] = hid
    his['hisobj'] = deepcopy(crobjs)
    his['hisact'] = act
    his['tstamp'] = TSTAMP()
    #   appended into KVDB
    KV.add(his['id'],his)
    #   collected into SYS:his
    k4his, crthis = INIobjSYS("his")
    INS2KV(hid, k4his, crthis)
    #print "\tSYS:his:", KV.get(k4his)
    return hid



</t>
<t tx="zoomq.20120802192540.8728">def INS2KV(xid, k4obj, crobjs):
    #k4obj, crobjs = INIobjSYS(sysk)
    try:
        if xid in crobjs:
            pass
        else:
            crobjs.append(xid)
            KV.set(k4obj, crobjs)
    except:
        print "&gt;&gt;&gt;INS2KV(xid, sysk)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    return True



</t>
<t tx="zoomq.20120804110957.4144">def POP4KV(xid, k4obj, crobjs):
    try:
        #k4obj, crobjs = INIobjSYS(sysk)
        if xid in crobjs:
            crobjs.pop(crobjs.index(xid))
            KV.set(k4obj, crobjs)
        else:
            pass
    except:
        print "&gt;&gt;&gt;POP2KV(xid, sysk)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    return True



</t>
<t tx="zoomq.20120804110957.4147">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ by 42qu.com 
input,button,select,textarea{font-size:16px;line-height:28px}

*/
input,button,select,textarea{
    font-size:14px;line-height:28px
}
div{cursor:default}

input{  
    font-size:22px;
    line-height:36px;
    height:42px;
    padding:4px 3px;
    border:1px solid #ddd;
    width:27em;
}
input.checkbox{
    font-size:22px;
    line-height:24px;
    height:24px;
    width:auto;

}  

#optradios input{
    font-size:18px;line-height:22px;height:26px;
    padding:0px;
    border:1px solid #ddd;
    width:1em;
}
    
select{
    font-size:16px;line-height:18px;
    padding:8px;
    text-align:center;border:1px solid #ccc;
    margin-right:8px;
    width:120px;
}

textarea{
    font-size:22px;
    overflow:auto;resize:none;
    border:1px solid #ccc;
    padding:4px 3px;
    margin:0;
    width:27em;
}
</t>
<t tx="zoomq.20120804110957.4148">ul li {font-size:120%;
    line-height: 36px;
    border-top:1px dotted #aaa;
    width:98%;
    list-style-type:none;
    padding: 5px 0px 0px 10px;
}
ul li.textarea3 {
    height: 108px;
    border: 0px dotted #930;
}
ul li.textarea1 {
    height: 50px;
    border: 0px dotted #930;
}
.even{
    background: #FFF4DB;
}
ul.asform li{
    display:inline-block; 
    vertical-align:top; 
    border-top:0px dotted #aaa;
}
.leftlabel{
    float: left;
}
.rightinput{
    float: right;
}
span.label{
    display:inline-block; 
    border: 1px solid #777;
    width:7em;
    padding: 5px;
    text-align:right;
}

ol li {font-size:120%;
    line-height: 24px;
    border-bottom:1px dotted #aaa;
    width:90%;
    list-style-type:none;
    margin-left: 20px;
}

sub,sup {font-size:10px; }
fieldset sub{
    color:#999;
}


fieldset{
    margin-top: 10px;
    padding: 20px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}
fieldset i{
    font-size: 70%;
    color: #787;
    margin-top: 10px;
    line-height:36px;
}

</t>
<t tx="zoomq.20120804110957.4149">b.alert{
    font-size: 150%;
    color: #930;
}


pre {
    font-weight：lighter;
    font-size: 80%;
    border: 4px dotted #fefefe;
    background : #ededed;
    padding: 5px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}

pre.desc {
    font-size: 14px;
    border: 2px dotted #ddd;
    background : #fefefe;
    padding: 10px;
    border-radius: 15px 0px 15px 0px;
    width:70%;
    display:inline-block;
}
</t>
<t tx="zoomq.20120804110957.4485">def POP4LIST(cnt, listobj):
    '''try safty pop SOMETHING from list
    '''
    try:
        idxcnt = listobj.index(cnt)
    except:
        print "&gt;&gt;&gt;POP4LIST(cnt, listobj)\n\t", traceback.print_exc()
        #sys.exit(1)
        return None
    listobj.pop(idxcnt)
    return True






</t>
<t tx="zoomq.20120805183037.4187">def INS2LIST(cnt, listobj):
    '''try safty insert SOMETHING to list
    '''
    #print "\t&gt;&gt;&gt;", cnt, listobj
    listobj.append(cnt)
    return list(set(listobj)) # 防止意外重复



</t>
<t tx="zoomq.20120805183037.5896">def INS2DICT4LIST(cnt, dictobj, keyname):
    '''try safty insert SOMETHING to list
    '''
    #print "\t&gt;&gt;&gt;", cnt, listobj
    if dictobj.has_key(keyname):
        listobj = dictobj[keyname]
        listobj.append(cnt)
        listobj  = list(set(listobj))
        #print "\t list(set(listobj))", listobj
    else:
        listobj = []
        listobj.append(cnt)
        dictobj[keyname] = listobj
        #print "\t dictobj[keyname]~", dictobj[keyname]
    return listobj, dictobj # 防止意外重复






</t>
<t tx="zoomq.20120812115324.4334">{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120820121523.7422">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG
KV = CFG.KV
from xsettings import XCFG

@others

</t>
<t tx="zoomq.20120820121523.7423">'''base: ms4py / bottle-wiki / source — Bitbucket
	https://bitbucket.org/ms4py/bottle-wiki/src/1586473a6ce1/auth.py
'''
import sys
from time import time, gmtime, strftime, localtime
import base64
import urllib2 as urilib
from base64 import urlsafe_b64encode

from hashlib import md5
from hashlib import sha256
from functools import partial

from bottle import request, HTTPError

</t>
<t tx="zoomq.20120820121523.7424">def check_login(username, password, fullpath):
    '''根据用户名,以及口令:
        - 明确是否登录
        - 明确是否有当前级别的权限!
    '''
    pw_hash = sha256_uhex(password)
    suname = sha256_uhex(username)
    usrid = "%s%s"% (CFG.PREUID, suname)
    crtusr = KV.get(usrid)
    #print fullpath.split("/")[1]
    #print type(CFG.LEVEL4USR[fullpath.split("/")[1]])
    #print type(crtusr['level'])
    if crtusr:
        crtPathLevel = CFG.LEVEL4USR[fullpath.split("/")[1]]
        if str(crtPathLevel) == str(crtusr['level']):
            print "'%s' had crt. path right ;-)"% username
            return True
        else:
            print "'%s' disallow crt. path ;-("% username
            return False
    else:
        print "'%s' NOT exist!"% username
        return False
    '''
    #print fullpath.split("/")[1]
    print CFG.LEVEL4USR[fullpath.split("/")[1]]
    usr = 1#KV.get("usr:%s"% str(sha256_uhex(username.decode('utf-8'))))
    if usr is None:
        return False
    #return usr.password == pw_hash
    return 1
    '''

</t>
<t tx="zoomq.20120820121523.7425">def auth_required(check_func=check_login, realm='bottle-authentication'):
    """
    Decorator for basic authentication. 
    
    "check_func" has to be a callable object with two 
    arguments ("username" and "password") and has to return 
    a bool value if login was sucessful or not.
    """
    def decorator(view):
        def wrapper(*args, **kwargs):
            try:
                user, password = request.auth
            except (TypeError, AttributeError):
                # catch AttributeError because of bug in bottle
                auth = False
            else:
                auth = check_login(user, password, request.fullpath)
                #print "\t path: ", request.keys()
                #print request.fullpath
            if auth:
                return view(*args, **kwargs)
            return HTTPError(401, 'Access denied!', 
                header={'WWW-Authenticate': 'Basic realm="%s"' % realm})
        return wrapper
    return decorator

</t>
<t tx="zoomq.20120820121523.7426">def sha256_uhex(data):
    ''' Generates unicode hex value of given data with SHA-256. '''
    return str(unicode(sha256(data).hexdigest()))
</t>
<t tx="zoomq.20130918155053.5760">@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    print request.query.keys()
    print request.query.echostr
    #print request.query_string
    #print dir(BaseRequest.query_string)
    return request.query.echostr
</t>
<t tx="zoomq.20130918155053.7083">@APP.post('/echo')
@APP.post('/echo/')
def wechat_post():
    #print request.forms.keys()[0]
    xml = etree.XML(request.forms.keys()[0])
    __MsgType = xml.findtext("MsgType")
    __Content = xml.findtext("Content") #.encode('utf8')
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    G_CRT_USR = __chkRegUsr(toUser)
    G_CRT_USR['msg'] = __Content
    G_CRT_USR['fromUser'] = fromUser
    G_CRT_USR['toUser'] = toUser
    # usage pyfsm as FSM echo all kinds of usr ask
    weknow = pyfsm.Registry.get_task('weknow')
    if G_CRT_USR['fsm']:
        weknow.start2(G_CRT_USR['fsm'], G_CRT_USR)
        __update_usr(G_CRT_USR)
    else:
        weknow.start2('setup', G_CRT_USR)
        G_CRT_USR['fsm'] = "setup"
        __update_usr(G_CRT_USR)
    weknow.send2(__Content, G_CRT_USR)
    return None
    
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;
        
    







</t>
<t tx="zoomq.20130918155053.7084">&lt;&lt;XML模板&gt;&gt;
&lt;&lt;ALIAS&gt;&gt;
@others


'''
2013/09/23 12:13:56] -  &lt;xml&gt;
     &lt;ToUserName&gt;&lt;![CDATA[oFNShjiOhclfJ-CtOO81p2sPrBfs]]&gt;&lt;/ToUserName&gt;
     &lt;FromUserName&gt;&lt;![CDATA[gh_5e32c47b5b23]]&gt;&lt;/FromUserName&gt;
     &lt;CreateTime&gt;13092312135634476&lt;/CreateTime&gt;
     &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
     &lt;Content&gt;&lt;![CDATA[本公众号的自动回答范畴：
    - GDG活动报名、签到、直播
    - GDG大妈联系查询
    - GDG发表文章查阅
    功能正在完善中，欢迎反馈。
    更多请惯性地输入 h 继续吧 :)
    ]]&gt;&lt;/Content&gt;
     &lt;/xml&gt; yq34 
'''
</t>
<t tx="zoomq.20130918155053.8973">@language python
@tabwidth -4


</t>
<t tx="zoomq.20130923093950.3647">import sae.kvdb
KV = sae.kvdb.KVClient()
#   系统索引键-名字典
K4D = {'incr':"SYS:TOT"         # int
    ,'member':"SYS:usrs:ALL"    # [] 所有用户  (包含已经 del 的)
    ,'events':"SYS:eves:ALL"    # [] 所有活动索引 (包含已经 del 的)
    ,'papers':"SYS:pubs:ALL"    # [] 所有文章索引 (包含已经 del 的)
}
#KEY4_incr = K4D['incr']
for k in K4D:
    if None == KV.get(K4D[k]):
        if 'incr' == k:
            KV.add(K4D[k], 0)
        else:
            KV.add(K4D[k], [])
    else:
        print K4D[k], KV.get(K4D[k])

&lt;&lt;MEMBER&gt;&gt;

&lt;&lt;大妈们&gt;&gt;

&lt;&lt;CONTENT&gt;&gt;

&lt;&lt;HISTORIC&gt;&gt;


</t>
<t tx="zoomq.20130923093950.5395">ESSAY_TAG = {'ot':"其它"
    , 'gb':"G术图书 (推荐好书,书无中外)"
    , 'dd':"D码点评 (麻辣评点,善意满盈)"
    , 'gt':"G说公论 (时评杂文,新旧不拘)"
    , 'hd':"海选文章 (得要相信,大妈法眼)"
    }
    
# 文章索引
K4WD = {"his_id":""   # 更新戮
    , "del":0
    , "type":"txt"  # 信息类型 txt|uri|pic
    , "tag":"ot"
    , 'tiele':''
    , "desc":""     # 解释
    , "picurl":''
    , "url":""
    }
    


</t>
<t tx="zoomq.20130923093950.5396">#   历史操作 键-名字典
K4H = {'C':"Create"
    ,'D':"Delete"
    ,'U':"Update"
    }
#'uuid':""     # 历史版本扩展ID
objHis = {'hisobj':""
    ,'actype':"..."     # 操作类型C|D|U~ Create|Delet|Update = 创建|删除|更新
    ,'dump':''        # 数据集
    }


</t>
<t tx="zoomq.20130923093950.5397">objUSR={"his_id":""   # 更新戮
    , "lasttm": ''  # time.time()
    , "del":0
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释

    , "fsm":""      # 有限状态机 当前状态
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    }
    


</t>
<t tx="zoomq.20130923093950.7285">TPL_TEXT=''' &lt;xml&gt;
 &lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
 &lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
 &lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
 &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
 &lt;Content&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Content&gt;
 &lt;/xml&gt;'''

TPL_URIS='''&lt;xml&gt;
 &lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
 &lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
 &lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
 &lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;
 &lt;ArticleCount&gt;%(item_count)d&lt;/ArticleCount&gt;
 &lt;Articles&gt;
 %(items)s
 &lt;/Articles&gt;
 &lt;/xml&gt; 
'''

TPL_ITEM='''&lt;item&gt;
 &lt;Title&gt;&lt;![CDATA[%(title)s]]&gt;&lt;/Title&gt; 
 &lt;Description&gt;&lt;![CDATA[%(description)s]]&gt;&lt;/Description&gt;
 &lt;PicUrl&gt;&lt;![CDATA[%(picurl)s]]&gt;&lt;/PicUrl&gt;
 &lt;Url&gt;&lt;![CDATA[%(url)s]]&gt;&lt;/Url&gt;
 &lt;/item&gt;
'''
</t>
<t tx="zoomq.20130923093950.8563">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130923093950.8564">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130923093950.8565">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130923093950.8566">return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130923093950.8567">if "" == crt_usr['em']:
    # 1st ping
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% crt_usr['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''
'''
objUSR={"uuid":""            
    , "his_id":""   # 更新戮
    , "del":0
    , "fsm":""      # 有限状态机 当前状态
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    , "lasttm": ''  #"2013-07-05 19:01:33",
    }    
'''


</t>
<t tx="zoomq.20130923093950.8569"># 大妈们的联系方式
K4DM = {"his_id":""   # 更新戮
    , "del":0
    , "nm":""       # NickName "Zoom.Quiet"
    , "desc":""     # 解释
    , "pp":''       # Passport "kswl662773786"
    , 'em':''       #'zhouqi@ijinshan.com',
    }


</t>
<t tx="zoomq.20130923093950.8570">def __echo_txt(fromUsr, toUsr, text):
    tStamp = TSTAMP()
    fromUser = fromUsr
    toUser = toUsr
    content = text
    print CFG.TPL_TEXT% locals()
    return CFG.TPL_TEXT% locals()

</t>
<t tx="zoomq.20130923093950.8816">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
crt_usr['em'] = em
KV.replace(usrs[0][0] , crt_usr)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130923093950.8817">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130923093950.8818">CMD_ALIAS={"help": ['h', 'H', 'Help', 'help', '?', u'？']
    , "version": ['v', 'V', 'ver', 'Version', 'version', 'Ver']
    , "info": ['i', 'I', 'Info', 'info', 'info.', 'information']
    , "search": ['s', 'S', 'see', 'See', 'search', 'Search', 'seek']
    , "event": ['e', 'E', 'event', 'Event', 'events', 'act']
    , "dm": ['dm', 'DM', 'Dm', 'dd']
    , "sayeahoo": ['syh', 'kvdb', 'stat', 'status']
    }

DM_ALIAS = {"LXC": ['Bonnie', 'liuxinchen', 'lxc', 'LXC', u'刘星辰']
    , "ZQ": ['zq', 'zoomq', 'ZQ', u'ZQ大妈', u'大妈', u'周琦']
    , "LG": ['GJT', 'gaojunten', 'LG', 'lg', 'spawnris', 'Spawnris', u'老高', u'高骏腾']
    , "LQX": ['lqx', 'LQX', 'langqixu', u'小郎', u'郎启旭']
    }


</t>
<t tx="zoomq.20130925103854.4951">APIPRE = "/cli" #% _API_ROOT
STLIMI = 4.2    # 请求安全时限(秒)
CLI_MATTERS = {     # 命令行响应方式速查字典
    "sum/usr":"GET"             # 统计用户现状
    , "info/usr":   "GET"       # 查阅用户信息
    , "find/usr":   "GET"       # 搜索用户
    , "list/usr":   "GET"       # 列出指定级别用户
    , "del/usr":    "DELETE"    # 软删除所有用户 (包含tag 信息)
    , "reliv/usr":  "PUT"       # 恢复指定用户
    , "acl/usr":    "PUT"       # 设置用户权限
    , "fix/usr":    "PUT"       # 修订用户信息

    , "echo":       "GET"       # 模拟wechat 问答
    
    , "st/kv":      "GET"       # 查阅 KVDB 信息
    
    , "bkup/db":    "GET"       # 备份整个 KVDB
    , "bkup/m":    "GET"        # 备份所有 成员
    , "bkup/e":    "GET"        # 备份所有 活动
    , "bkup/p":    "GET"        # 备份所有 文章

    , "revert/db":  "POST"      # 恢复整个 KVDB
    
    , "sum/his":    "GET"       # 节点(任意)修订次数
    , "his/last":   "GET"       # 最后一次节点(任意)修订
    }


LEVEL4USR = {"mana":0
    , "up":1
    , "api":2
    }

</t>
<t tx="zoomq.20130925103854.4957">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
#!/usr/bin/env python
&lt;&lt;docopt&gt;&gt;
&lt;&lt;declarations&gt;&gt;
AS_USR = "oFNShjiOhclfJ-CtOO81p2sPrBfs"
AS_SRV = "gh_5e32c47b5b23"
AS_LOCAL = "http://localhost:8080/api"
AS_SAE = "http://weknow.sinaapp.com/api"

@others

if __name__ == '__main__':
    '''
    - 为了简化 后台控制的界面开发,快速实现远程控制
    - 通过 RESTful 接口,从本地使用工具脚本实施管理事务!
    '''
    arguments = docopt(__doc__, version='lbTCLI v13.09.03b')
    metter = arguments.get('&lt;matter&gt;')
    debug = arguments.get('--debug')
    sets = arguments.get('&lt;sets&gt;')
    #print arguments
    smart_rest(metter, sets)
    #_rest_main(method, uri, args)

'''
 &lt;xml&gt;
     &lt;ToUserName&gt;&lt;![CDATA[oFNShjiOhclfJ-CtOO81p2sPrBfs]]&gt;&lt;/ToUserName&gt;
     &lt;FromUserName&gt;&lt;![CDATA[gh_5e32c47b5b23]]&gt;&lt;/FromUserName&gt;
     &lt;CreateTime&gt;13092510285258005&lt;/CreateTime&gt;
     &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
     &lt;Content&gt;&lt;![CDATA[weknow v13.09.18]]&gt;&lt;/Content&gt;
     &lt;/xml&gt; yq34 
'''


</t>
<t tx="zoomq.20130925103854.4958">"""CLI for WeKnow.

Usage:
  CLI.py [--debug] &lt;matter&gt; [&lt;sets&gt;]
  CLI.py -h | --help
  CLI.py -D | --debug    向本地接口发送请求
  CLI.py -V | --version

Options:
  -h --help     Show this screen.
  -V --version  Show version.
  -D --debug    对本地系统测试时专用参数
  &lt;matter&gt;      事务URI
  &lt;sets&gt;        数据设定
  
e.g:
  一般形式:
  $ python lbTCLI.py 事务指令 [可能的值设定 set=** 形式]

  echo set=i 

  sum/usr                   查询 用户 整体现状
  info/usr/:UUID            查阅指定 用户 信息
  find/usr/&lt;关键字&gt;    搜索用户 [对名称,描述 进行搜索]
  fix/usr/:UUID nm=ZQ      修订指定 用户 信息
    可设定字段: nm ~ nike name

  st/kv                   查询 KVDB 整体现状

  !!! 小心:大规模数据删除操作 !!!
  bkup/db set=all
  bkup/m set=all
  bkup/e set=all
  bkup/p set=all
  ...
  
"""
</t>
<t tx="zoomq.20130925103854.4959">import sys
import os
import base64
from subprocess import Popen
from time import time, gmtime, strftime, localtime

from docopt import docopt

from config import CFG
from xsettings import XCFG
from module.auth import _genQueryArgs, _genArgsStr
</t>
<t tx="zoomq.20130925103854.4960">def _rest_main(method, uri, args, host=AS_LOCAL):
    '''接受事务指令+数据, 合理拼成 hhtp 命令行:
        - GET/DELETE 时将参数拼为统一间隔字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
    '''
    if method in ['PUT', 'POST']:
        #print "PUT/POST" 
        &lt;&lt;POST PUT&gt;&gt;
    else:
        # GET/DELETE
        if "echo" == uri:
            &lt;&lt;echo matters&gt;&gt;
        else:
            &lt;&lt;GET DEL&gt;&gt;
    #print cmd
    Popen(cmd, shell=True, close_fds=True)
    #print p.stderr

    </t>
<t tx="zoomq.20130925103854.4961">def smart_rest(metter, sets):
    '''确保所有操作元语为 两节,其它作为附加参数...
    '''
    print metter, sets
    #print len(metter.split('/'))
    if "echo" == metter:
        _rest_main(CFG.CLI_MATTERS[metter], metter, sets)
    else:
        paths = metter.split('/')
        if 2 == len(paths):
            method = CFG.CLI_MATTERS["/".join(paths)]
        else:
            method = CFG.CLI_MATTERS["/".join(paths[:-1])]
        #print "smart_rest:", method
        if debug:
            _rest_main(method, metter, sets)
        else:
            _rest_main(method, metter, sets, host=AS_SAE)
    

</t>
<t tx="zoomq.20130925103854.5007"># echo for RESTful remote actions
'''[api]RESTful管理事务设计 on lbTC-开发协调 | Trello
	https://trello.com/c/ztdsulpM/82-api-restful
- 全部基于: `/api/cli` 前缀
    - 版本区隔为: `/api/v2/cli` 前缀
- 签名检验
- 时间检验(4.2秒以内, 并发不得超过 `N` 次)
'''

</t>
<t tx="zoomq.20130925103854.5033"># collection usr ACL matter
'''

  统计节点(任意)修订次数
    sum/his
  检阅最后一次节点(任意)修订
    his/last

'''</t>
<t tx="zoomq.20130925103854.5034">@APP.get('/cli/sum/his/&lt;qstr&gt;')
def sum_tag(qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/his", q_dict, "GET"):
        data = []
        for u in CFG.HIS.find({}
            , {'_id':0, 'usrid':1, 'hisobj':1, 'uuid':1, 'actype':1}
            , limit=2):
            data.append(u)
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.HIS.find({}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5035">@APP.get('/cli/his/last/&lt;qstr&gt;')
def sum_tag(qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/his/last", q_dict, "GET"):
        #data = []
        q_mongo = CFG.HIS.find({},{'_id':0},limit=1).sort("uuid", pymongo.DESCENDING)
        #print q_mongo[0] cPickle.loads('N.')
        return {'msg':"safe quary;-)"
            , 'data':q_mongo[0]
            , 'count': CFG.HIS.find({}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5041"># collection usr ACL matter
'''
'''
</t>
<t tx="zoomq.20130925103854.5042">@APP.put('/cli/acl/usr/&lt;uuid&gt;')
def put_usr_acl(uuid):
    q_dict = request.forms
    #print q_dict
    if _chkQueryArgs("/cli/acl/usr/%s"% uuid, q_dict, "PUT"):
        if 'set' in q_dict.keys():
            &lt;&lt;acl bind&gt;&gt;
            return {'msg':"safe quary;-)"
                , 'data': data
                }
        else:
            return {'alert':"lost set=XXX !-("}
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5043">q_acl = base64.urlsafe_b64decode(q_dict['set'])
if q_acl in CFG.ACL_USR.keys():
    print q_acl, CFG.ACL_USR[q_acl]
    data = {}
    his_id = HISIT('usr', uuid, "U")
    print CFG.USR.update({'uuid':uuid}
        ,{"$set": {"acl": CFG.ACL_USR[q_acl]
            , 'his_id':his_id
            }
        })
    data['hisid'] = his_id
    data['setACL'] = CFG.ACL_USR[q_acl]
    
    #print dump, "\n\t", len(dump)
    #print marshal.loads(dump)
else:
    return {'alert':'bad acl alias!-( MUST:[ban|usr|api|admin]'}

</t>
<t tx="zoomq.20130925103854.5044">@APP.put('/cli/reliv/usr/&lt;uuid&gt;')
def put_usr_reliv(uuid):
    q_dict = request.forms
    #print q_dict
    if _chkQueryArgs("/cli/reliv/usr/%s"% uuid, q_dict, "PUT"):
        if 'set' in q_dict.keys():
            &lt;&lt;reliv del&gt;&gt;
            return {'msg':"safe quary;-)"
                , 'data': data
                }
        else:
            return {'alert':"lost set=XXX !-("}
    else:
        return "alert quary!-("



</t>
<t tx="zoomq.20130925103854.5045">data = {}
his_id = HISIT('usr', uuid, "U")
print CFG.USR.update({'uuid':uuid}
    ,{"$set": {"del": 0
        , 'his_id':his_id
        }
    })
data['hisid'] = his_id
data['means'] = "usr reliving now"
</t>
<t tx="zoomq.20130925103854.5046">@APP.delete('/cli/del/usr/&lt;uuid&gt;/&lt;qstr&gt;')
def del_usr(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/del/usr/%s"% uuid, q_dict, "DELETE"):
        &lt;&lt;usr del&gt;&gt;
        return {'msg':"safe quary;-)"
            , 'data': data
            }
    else:
        return "alert quary!-("





</t>
<t tx="zoomq.20130925103854.5047">data = {}
his_id = HISIT('usr', uuid, "D")
print CFG.USR.update({'uuid':uuid}
    ,{"$set": {"del": 1
        , 'his_id':his_id
        }
    })
data['hisid'] = his_id
data['means'] = "usr DELETE now!"
</t>
<t tx="zoomq.20130925103854.5048">@APP.get('/cli/info/usr/&lt;uuid&gt;/&lt;qstr&gt;')
def get_usr_info(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/info/usr/%s"% uuid, q_dict, "GET"):
        return {'msg':"safe quary;-)"
            , 'data':CFG.USR.find_one({'uuid': uuid}, {'_id':0})
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5049">@APP.get('/cli/st/kv/&lt;qstr&gt;')
def st_kv(qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/st/kv", q_dict, "GET"):
        data = []
        #data.append(KV.get_info())
        return KV.get_info()
        return {'msg':"safe quary;-)"
            , 'data':data
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5050">@APP.get('/cli/list/usr/&lt;acl&gt;/&lt;qstr&gt;')
def q_usr_acl(acl, qstr):
    '''ACL_USR={'ban':0,'usr':1,'api':42,'admin':100}
    '''
    print acl
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/list/usr/%s"% acl, q_dict, "GET"):
        data = []
        for u in CFG.USR.find({'acl':acl}
            , {'_id':0, 'pp':1, 'nm':1, 'acl':1, 'uuid':1}
            , limit=5).sort("uuid"):
            data.append(u)
            
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.USR.find({'acl':acl}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.5051">@APP.get('/cli/find/usr/&lt;kword&gt;/&lt;qstr&gt;')
def find_usr_kword(kword, qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    pattern = re.compile(".*%s.*"% kword)
    if _chkQueryArgs("/cli/find/usr/%s"% kword, q_dict, "GET"):
        data = []
        for u in CFG.USR.find({"$or":[{'nm':pattern}
                , {'em':pattern}
                , {'acc':pattern}
                , {'uuid':pattern}
                ]}
            , {'_id':0, 'pp':1, 'nm':1, 'acl':1, 'uuid':1}
            , limit=5):
            data.append(u)
            
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.USR.find({"$or":[{'nm':pattern}
                , {'em':pattern}
                , {'mb':pattern}
                , {'uuid':pattern}
                ]}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.6406">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sys   
#sys.path.append("..")  


</t>
<t tx="zoomq.20130925103854.6418">@APP.post('/echo')
@APP.post('/echo/')
def wechat_post():
    #print request.forms.keys()[0]
    xml = etree.XML(request.forms.keys()[0])
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    sha1_name = hashlib.sha1(toUser).hexdigest()
    pre_uuid = "u:%s"% sha1_name
    __MsgType = xml.findtext("MsgType")
    Content = xml.findtext("Content") #.encode('utf8')
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;
        
    







</t>
<t tx="zoomq.20130925103854.6419">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130925103854.6420">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
member = usrs[0][1] 
member['em'] = em
KV.replace(usrs[0][0] , member)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130925103854.6421">usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
print usrs
print "CFG.TOT ", CFG.TOT
if 0 == len(usrs):
    # 1st ping
    print "sha1_name: ", sha1_name
    uuid = GENID('usr', name = sha1_name)
    new_usr = deepcopy(CFG.objUSR)
    new_usr['his_id'] = GENID('his')
    new_usr['pp'] = toUser
    new_usr['lasttm'] = time.time()
    print uuid, new_usr
    KV.add(uuid, new_usr)
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    member = usrs[0][1]
    if "" == member['em']:
        return __echo_txt(fromUser, toUser, CFG.TXT_PLS_EM)
    else:
        return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% member['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''
'''
objUSR={"uuid":""            
    , "his_id":""   # 更新戮
    , "del":0
    , "fsm":""      # 有限状态机 当前状态
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    , "lasttm": ''  #"2013-07-05 19:01:33",
    }    
'''


</t>
<t tx="zoomq.20130925103854.6422">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130925103854.6423">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130925103854.6424">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130925103854.6425">pass
#return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130925103854.6426">def __chkRegUsr(openid):
    '''chk or init. webchat usr.:
        - gen KV uuid, try get
        - if no-exited, init. fsm
    '''
    sha1_name = hashlib.sha1(openid).hexdigest()
    uuid = USRID(sha1_name)
    usr = KV.get(uuid)
    if usr:
        print usr
        return usr
    else:
        # inti.
        new_usr = deepcopy(CFG.objUSR)
        new_usr['his_id'] = GENID('his')
        new_usr['pp'] = openid
        new_usr['lasttm'] = time.time()
        new_usr['fsm'] = None
        KV.add(uuid, new_usr)
        ADD4SYS('member', uuid)
        print new_usr
        return new_usr



        
        
</t>
<t tx="zoomq.20130925103854.6427">def __update_usr(objUsr):
    sha1_name = hashlib.sha1(objUsr['pp']).hexdigest()
    uuid = USRID(sha1_name)
    KV.replace(uuid, objUsr)</t>
<t tx="zoomq.20130925103854.6429">def USRID(name):
    return 'u:%s'% name



</t>
<t tx="zoomq.20130925103854.6430">@state('weknow')
@transition('e', 'events')
@transition('E', 'events')
@transition('re', 'reg_event')
@transition('rc', 'reg_cancel')
@transition('ri', 'reg_info')
@transition('i', 'info_me')
@transition('I', 'info_me')
@transition('me', 'info_me')
@transition('ei', 'edit_info')
@transition('s', 'seek')
@transition('S', 'seek')
#@transition('dm', 'dm_addr')
#@transition('DM', 'dm_addr')
@transition('h', 'helpme')
@transition('?', 'helpme')
@transition('help', 'helpme')
@transition('V', 'version')
@transition('v', 'version')
@transition('version', 'version')
@transition('log', 'version')
@transition('st', 'status')
@transition('stat', 'status')
def setup(self, crt_usr):
    print 'setup-&gt;{h V e re rc ir i ei s}|大妈信息'
    &lt;&lt;大妈联系&gt;&gt;

@state('weknow')
def end(self, crt_usr):
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    print '...-&gt;end'


</t>
<t tx="zoomq.20130925103854.6431">@state('weknow')
@transition('gb', 'gbook')
@transition('dd', 'dcode')
@transition('gt', 'gtime')
@transition('dm', 'dama')
@transition('ot', 'others')
def seek(self, crt_usr):
    print "G_CRT_USR", crt_usr
    crt_usr['fsm'] = "seek"
    __update_usr(crt_usr)
    print 'setup-&gt;seek-&gt;{gb dd gt dm ot}'

@state('weknow')
@transition('no', 'no_paper')
@transition('*', 'end')
def gbook(self, crt_usr):
    print 'setup-&gt;seek-&gt;gb-&gt;no'
    crt_usr['fsm'] = "no_paper"
    __update_usr(crt_usr)

@state('weknow')
@transition('no', 'no_paper')
@transition('*', 'end')
def dcode(self, crt_usr):
    print 'setup-&gt;seek-&gt;dd-&gt;no'
    crt_usr['fsm'] = "no_paper"
    __update_usr(crt_usr)

@state('weknow')
@transition('no', 'no_paper')
@transition('*', 'end')
def gtime(self, crt_usr):
    print 'setup-&gt;seek-&gt;gt-&gt;no'
    crt_usr['fsm'] = "no_paper"
    __update_usr(crt_usr)

@state('weknow')
@transition('no', 'no_paper')
@transition('*', 'end')
def dama(self, crt_usr):
    print 'setup-&gt;seek-&gt;dm-&gt;no'
    crt_usr['fsm'] = "no_paper"
    __update_usr(crt_usr)

@state('weknow')
@transition('no', 'no_paper')
@transition('*', 'end')
def others(self, crt_usr):
    print 'setup-&gt;seek-&gt;ot-&gt;no'
    crt_usr['fsm'] = "no_paper"
    __update_usr(crt_usr)
    
@state('weknow')
@transition('end', 'end')
@transition('*', 'end')
def no_paper(self, crt_usr):
    print 'setup-&gt;seek-&gt;...-&gt;no-&gt;end'
    print crt_usr['msg']
    if crt_usr['msg'].isdigit():
        print "exp URI xml..."
        crt_usr['fsm'] = "setup"
        __update_usr(crt_usr)
    else:
        crt_usr['fsm'] = "no_paper"
        __update_usr(crt_usr)
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_PLS_INT
            )
</t>
<t tx="zoomq.20130925103854.6433">@state('weknow')
@transition('end', 'end')
def info_me(self, crt_usr):
    print 'setup-&gt;info_me-&gt;end'
    print crt_usr['fsm']
    crt_usr['fsm'] = "setup"
    __update_usr(crt_usr)
    if "" == crt_usr['em']:
        # not set info. yet
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_NO_INIT
            )
    else:
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_CRT_ME% (crt_usr['nm'].encode('utf-8'), crt_usr['em'])
            )

@state('weknow')
@transition('*', 'end')
@transition('ia', 'info_alias')
def edit_info(self, crt_usr):
    print "edit_info::",crt_usr['msg']
    print 'setup-&gt;edit_info-&gt;info_alias 提醒输入妮称'
    crt_usr['fsm'] = "info_alias"
    __update_usr(crt_usr)
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_PLS_ALIAS
        )
'''    if isinstance(crt_usr['msg'], unicode):
        print "可能是中文"
        crt_usr['fsm'] = "edit_info"
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_PLS_EN4NM
            )
    else:
'''    
@state('weknow')
@transition('*', 'end')
@transition('im', 'info_mail')
def info_alias(self, crt_usr):
    print "info_alias::", crt_usr['msg']
    print 'setup-&gt;edit_info-&gt;info_alias-&gt;info_mail 提醒输入邮箱'
    crt_usr['fsm'] = "info_mail"
    crt_usr['nm'] = crt_usr['msg']
    __update_usr(crt_usr)
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_PLS_EM
        )

@state('weknow')
@transition('*', 'end')
@transition('end', 'end')
def info_mail(self, crt_usr):
    print "info_mail::", crt_usr['msg']
    if "@" in crt_usr['msg']:
        crt_usr['em'] = crt_usr['msg']
        crt_usr['fsm'] = "setup"
        __update_usr(crt_usr)
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_DONE_EI% (crt_usr['nm'].encode('utf-8'), crt_usr['em'])
            )
    else:
        crt_usr['fsm'] = "info_mail"
        __update_usr(crt_usr)
        return __echo_txt(crt_usr['fromUser']
            , crt_usr['toUser']
            , CFG.TXT_REALY_EM
            )
    print 'setup-&gt;edit_info-&gt;info_alias-&gt;info_mail-&gt;end 回报收集的'


</t>
<t tx="zoomq.20130925103854.6435">@state('weknow')
@transition('end', 'end')
def reg_event(self, crt_usr):
    print 'setup-&gt;reg_event-&gt;end'

@state('weknow')
@transition('end', 'end')
def reg_cancel(self, crt_usr):
    print 'setup-&gt;reg_cancel-&gt;end'

@state('weknow')
@transition('end', 'end')
def reg_info(self, crt_usr):
    print 'setup-&gt;info_reg-&gt;end'

</t>
<t tx="zoomq.20130925103854.6437">@state('weknow')
@transition('end', 'end')
def events(self, crt_usr):
    print 'setup-&gt;events-&gt;end'
    


</t>
<t tx="zoomq.20130925103854.6439">def ADD4SYS(k4sys, cnt):
    '''try safty insert SOMETHING to SYS:** K/V
    only member|member|paper
    '''
    listobj = KV.get(CFG.K4D[k4sys])
    #print "listobj:\t", listobj
    # 防止意外重复
    listobj.append(cnt)
    appended = list(set(listobj))
    #print "appended\n", appended
    KV.replace(k4sys,  appended)
    return (k4sys, appended)



</t>
<t tx="zoomq.20130925103854.6441">@state('weknow')
@transition('end', 'end')
def helpme(self, crt_usr):
    print 'setup-&gt;helpme-&gt;end'
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , CFG.TXT_HELP
        )

@state('weknow')
@transition('end', 'end')
def version(self, crt_usr):
    print 'setup-&gt;version-&gt;end'
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , KV.get_info()
        )

@state('weknow')
@transition('end', 'end')
def status(self, crt_usr):
    print 'setup-&gt;status-&gt;end'
    return __echo_txt(crt_usr['fromUser']
        , crt_usr['toUser']
        , KV.get_info()
        )

</t>
<t tx="zoomq.20130925103854.6443">def _query2dict(qstr):
    q_dict = {}
    for q in base64.urlsafe_b64decode(qstr).split("&amp;"):
        item = q.split("=")
        q_dict[item[0]] = item[1]
    return q_dict
</t>
<t tx="zoomq.20130925103854.6445">def _chkQueryArgs(api_matter, q, rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    matter = api_matter #"%s/%s"% (CFG.APIPRE, api_matter)
    #print "matter", matter
    args = []
    args.append(("appkey", q['appkey'] ))
    args.append(("ts", q['ts'] ))
    #args.append(("sign", q['sign'] ))
    if rest_method in ['GET', 'DELETE']:
        re_sign = md5(_genArgsStr(matter, args) + XCFG.SECRET).hexdigest()
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
        #print chk_time&amp;chk_sign
        #print api_matter, q
    else:
        # POST PUT
        for k in q.keys():
            if k not in ['appkey', 'ts', 'sign']:
                args.append((k, q[k] ))
        re_sign = md5(_genArgsStr(matter, args) + XCFG.SECRET).hexdigest()
        #print "getsign\t", q['sign']
        #print "re_sign\t", re_sign
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
        #print api_matter, q
    return chk_time&amp;chk_sign
    #return "debug"
</t>
<t tx="zoomq.20130925103854.6447">def _genArgsStr(api_path, args):
    key_values = ["%s=%s"% (arg[0], arg[1]) for arg in args]
    base_string = api_path + "/" + "&amp;".join(key_values)
    return base_string

</t>
<t tx="zoomq.20130925103854.6449">def _genQueryArgs(api_matter, q="", rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    matter = "%s/%s"% (CFG.APIPRE, api_matter)
    print matter
    args = []
    args.append(("appkey", XCFG.APPKEY ))
    args.append(("ts", "%.3f" % (time()) ))

    if rest_method in ['GET', 'DELETE']:
        sign_base_string = _genArgsStr(matter, args)
        args.append(("sign"
            , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    else:
        # POST PUT
        if not q:
            print "缺少 set=*** 设定值"
            return None
        q_args = q.split("=")
        args.append((q_args[0], base64.urlsafe_b64encode(q_args[1])))
        sign_base_string = _genArgsStr(matter, args)
        args.append(("sign"
            , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    return args

</t>
<t tx="zoomq.20130925103854.6450">toUser = AS_SRV
fromUser = AS_USR
tStamp = int(time())
content = args.split("=")[-1].strip()
xml = CFG.TPL_TEXT % locals()
cmd = "curl -d '%s' %s/%s "% (xml, AS_LOCAL, uri)
print cmd

#return None


</t>
<t tx="zoomq.20130925103854.6451">put_args = _genQueryArgs(uri, q=args, rest_method=method)
if not put_args:
    print "参数错误,请先使用 -h 学习;-)"
    return None
#print "put_args\n\t", put_args
pur_vars = " ".join(["%s=%s"% (p[0], p[1]) for p in put_args])
#print pur_vars
uri = "%s%s/%s %s"% (host, CFG.APIPRE, uri, pur_vars)
cmd = "http -f -b %s %s "% (method, uri)


</t>
<t tx="zoomq.20130925103854.6452">get_args = _genQueryArgs(uri, rest_method=method)
#print "get_args\n\t", get_args
get_str = "&amp;".join(["%s=%s"% (g[0], g[1]) for g in get_args])
#print get_str
uri = "%s%s/%s/%s"% (host
    , CFG.APIPRE
    , uri
    , base64.urlsafe_b64encode(get_str)
    )
cmd = "http -b %s %s "% (method, uri)




</t>
<t tx="zoomq.20130925103854.6454">@APP.get('/cli/sum/usr/&lt;qstr&gt;')
def sum_usr(qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/usr", q_dict, "GET"):
        data = []
        usrs = KV.get(CFG.K4D['member'])
        print usrs
        for u in usrs[:3]:
            data.append(KV.get(u))
    
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': len(usrs)
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130925103854.6455">TXT_VER='''珠海GDG 公众号应答系统当前版本:
%s
Changelog:
- 130923 完成初始可用, 并发布 42分钟乱入 wechat 手册!-)
- 130918 启动开发

更多细节,请惯性地输入 h 继续吧 :)'''% VERSION

TXT_THANX='''亲! 感谢反馈信息, 大妈们得空就回复 ;-)
'''
TXT_HELP='''GDG珠海 公众号目前支持以下命令:
h   ~ 使用帮助
V   ~ 系统版本
s   ~ 查阅文章
i   ~ 查阅成员资料
ei  ~ 修订成员资料

e   ~ 活动查询
re  ~ 活动报名
rc  ~ 放弃报名
ri  ~ 确认报名

dm [组委的名字] 可了解TA更多
'''

TXT_WELCOME='''GDG珠海 公众号的应答范畴:
- GDG活动报名、签到、直播
- GDG大妈联系查询
- GDG发表文章查阅
功能正在完善中，欢迎反馈。
更多细节,请惯性地输入 h 继续吧 :)
'''
</t>
<t tx="zoomq.20130925103854.6456">TXT_CRT_ME='''亲! 你当前注册的成员信息如下:
妮称: %s
邮箱: %s

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_NO_INIT='''亲! 目测首次使用 俺们的应答服务?
请输入 ei 开始增补妮称以及邮箱卟!-) 

更多细节,请输入 h 继续吧 :)
'''
TXT_PLS_ALIAS='''请输入亲想用的妮称:
(成员信息增补流程 1/2)

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_PLS_EN4NM='''亲! 为输入方便,使用E文作为妮称吧!
(成员信息增补流程 1/2)

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_PLS_EM='''请输入亲常用邮箱:
(成员信息增补流程 2/2)

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_REALY_EM = '''亲! 要请输入邮箱格式吼!
(成员信息增补流程 2/2)

也可以输入 * 退出成员信息增补流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_DONE_EI='''谢谢,亲! 成员信息增补完成:
妮称: %s
邮箱: %s

(成员信息增补流程 完成!-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_NEW_USR='''亲!信息还曾注册, 请输入邮箱先;
形如:
em:foo.bar@gmail.com

更多细节,请惯性地输入 h 继续吧 :)
'''
</t>
<t tx="zoomq.20130925103854.6457"></t>
<t tx="zoomq.20130925103854.6458">TXT_PLS_INT = '''亲! 请输入类型文章的编号,仅数字就好:

也可以输入 * 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''</t>
<t tx="zoomq.20130925103854.6460">@state('weknow')
@transition('end', 'end')
def dm_addr(self, crt_usr):
    print 'setup-&gt;dm_addr-&gt;end'



    
</t>
<t tx="zoomq.20130925103854.6461">print crt_usr['msg']
if 8 &gt; len(crt_usr['msg']):
    print "try march dama"
    for DM in CFG.DM_ALIAS.keys():
        #print DM
        if crt_usr['msg'] in CFG.DM_ALIAS[DM]:
            print "found DM!", CFG.DM_ALIAS[DM][-1]


        
            


</t>
<t tx="zoomq.20130925103854.6463">def DAMAID(name):
    return 'm:%s:DM'% name



</t>
</tnodes>
</leo_file>
